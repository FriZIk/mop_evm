
Hello_World.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002508  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080025c8  080025c8  000125c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002634  08002634  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08002634  08002634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800263c  0800263c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002640  08002640  00012640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000004  08002648  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002648  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000057e5  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001178  00000000  00000000  00025811  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000650  00000000  00000000  00026990  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005a8  00000000  00000000  00026fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012f83  00000000  00000000  00027588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005906  00000000  00000000  0003a50b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000772b9  00000000  00000000  0003fe11  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b70ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001560  00000000  00000000  000b7148  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025b0 	.word	0x080025b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080025b0 	.word	0x080025b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <HAL_Init+0x3c>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_Init+0x3c>)
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	430a      	orrs	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000450:	2000      	movs	r0, #0
 8000452:	f000 f811 	bl	8000478 <HAL_InitTick>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d003      	beq.n	8000462 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e001      	b.n	8000466 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000462:	f001 ff9f 	bl	80023a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	781b      	ldrb	r3, [r3, #0]
}
 800046a:	0018      	movs	r0, r3
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40022000 	.word	0x40022000

08000478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000480:	230f      	movs	r3, #15
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_InitTick+0x50>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	23fa      	movs	r3, #250	; 0xfa
 800048e:	0099      	lsls	r1, r3, #2
 8000490:	0010      	movs	r0, r2
 8000492:	f7ff fe39 	bl	8000108 <__udivsi3>
 8000496:	0003      	movs	r3, r0
 8000498:	0018      	movs	r0, r3
 800049a:	f000 f8d4 	bl	8000646 <HAL_SYSTICK_Config>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d004      	beq.n	80004ac <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80004a2:	230f      	movs	r3, #15
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
 80004aa:	e006      	b.n	80004ba <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	425b      	negs	r3, r3
 80004b2:	2200      	movs	r2, #0
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 f8b1 	bl	800061c <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80004ba:	230f      	movs	r3, #15
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	781b      	ldrb	r3, [r3, #0]
}
 80004c0:	0018      	movs	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000000 	.word	0x20000000

080004cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  uwTick++;
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <HAL_IncTick+0x14>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <HAL_IncTick+0x14>)
 80004d8:	601a      	str	r2, [r3, #0]
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000020 	.word	0x20000020

080004e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  return uwTick;
 80004e8:	4b02      	ldr	r3, [pc, #8]	; (80004f4 <HAL_GetTick+0x10>)
 80004ea:	681b      	ldr	r3, [r3, #0]
}
 80004ec:	0018      	movs	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	20000020 	.word	0x20000020

080004f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	0002      	movs	r2, r0
 8000500:	6039      	str	r1, [r7, #0]
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b7f      	cmp	r3, #127	; 0x7f
 800050c:	d932      	bls.n	8000574 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800050e:	4a2f      	ldr	r2, [pc, #188]	; (80005cc <NVIC_SetPriority+0xd4>)
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	0019      	movs	r1, r3
 8000516:	230f      	movs	r3, #15
 8000518:	400b      	ands	r3, r1
 800051a:	3b08      	subs	r3, #8
 800051c:	089b      	lsrs	r3, r3, #2
 800051e:	3306      	adds	r3, #6
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	18d3      	adds	r3, r2, r3
 8000524:	3304      	adds	r3, #4
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	1dfa      	adds	r2, r7, #7
 800052a:	7812      	ldrb	r2, [r2, #0]
 800052c:	0011      	movs	r1, r2
 800052e:	2203      	movs	r2, #3
 8000530:	400a      	ands	r2, r1
 8000532:	00d2      	lsls	r2, r2, #3
 8000534:	21ff      	movs	r1, #255	; 0xff
 8000536:	4091      	lsls	r1, r2
 8000538:	000a      	movs	r2, r1
 800053a:	43d2      	mvns	r2, r2
 800053c:	401a      	ands	r2, r3
 800053e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	019b      	lsls	r3, r3, #6
 8000544:	22ff      	movs	r2, #255	; 0xff
 8000546:	401a      	ands	r2, r3
 8000548:	1dfb      	adds	r3, r7, #7
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	0018      	movs	r0, r3
 800054e:	2303      	movs	r3, #3
 8000550:	4003      	ands	r3, r0
 8000552:	00db      	lsls	r3, r3, #3
 8000554:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000556:	481d      	ldr	r0, [pc, #116]	; (80005cc <NVIC_SetPriority+0xd4>)
 8000558:	1dfb      	adds	r3, r7, #7
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	001c      	movs	r4, r3
 800055e:	230f      	movs	r3, #15
 8000560:	4023      	ands	r3, r4
 8000562:	3b08      	subs	r3, #8
 8000564:	089b      	lsrs	r3, r3, #2
 8000566:	430a      	orrs	r2, r1
 8000568:	3306      	adds	r3, #6
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	18c3      	adds	r3, r0, r3
 800056e:	3304      	adds	r3, #4
 8000570:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000572:	e027      	b.n	80005c4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000574:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <NVIC_SetPriority+0xd8>)
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b25b      	sxtb	r3, r3
 800057c:	089b      	lsrs	r3, r3, #2
 800057e:	33c0      	adds	r3, #192	; 0xc0
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	589b      	ldr	r3, [r3, r2]
 8000584:	1dfa      	adds	r2, r7, #7
 8000586:	7812      	ldrb	r2, [r2, #0]
 8000588:	0011      	movs	r1, r2
 800058a:	2203      	movs	r2, #3
 800058c:	400a      	ands	r2, r1
 800058e:	00d2      	lsls	r2, r2, #3
 8000590:	21ff      	movs	r1, #255	; 0xff
 8000592:	4091      	lsls	r1, r2
 8000594:	000a      	movs	r2, r1
 8000596:	43d2      	mvns	r2, r2
 8000598:	401a      	ands	r2, r3
 800059a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	019b      	lsls	r3, r3, #6
 80005a0:	22ff      	movs	r2, #255	; 0xff
 80005a2:	401a      	ands	r2, r3
 80005a4:	1dfb      	adds	r3, r7, #7
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	0018      	movs	r0, r3
 80005aa:	2303      	movs	r3, #3
 80005ac:	4003      	ands	r3, r0
 80005ae:	00db      	lsls	r3, r3, #3
 80005b0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <NVIC_SetPriority+0xd8>)
 80005b4:	1dfb      	adds	r3, r7, #7
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	089b      	lsrs	r3, r3, #2
 80005bc:	430a      	orrs	r2, r1
 80005be:	33c0      	adds	r3, #192	; 0xc0
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	501a      	str	r2, [r3, r0]
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b003      	add	sp, #12
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	e000ed00 	.word	0xe000ed00
 80005d0:	e000e100 	.word	0xe000e100

080005d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3b01      	subs	r3, #1
 80005e0:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <SysTick_Config+0x40>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d901      	bls.n	80005ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005e6:	2301      	movs	r3, #1
 80005e8:	e010      	b.n	800060c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <SysTick_Config+0x44>)
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	3a01      	subs	r2, #1
 80005f0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005f2:	2301      	movs	r3, #1
 80005f4:	425b      	negs	r3, r3
 80005f6:	2103      	movs	r1, #3
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff ff7d 	bl	80004f8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <SysTick_Config+0x44>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <SysTick_Config+0x44>)
 8000606:	2207      	movs	r2, #7
 8000608:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800060a:	2300      	movs	r3, #0
}
 800060c:	0018      	movs	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	b002      	add	sp, #8
 8000612:	bd80      	pop	{r7, pc}
 8000614:	00ffffff 	.word	0x00ffffff
 8000618:	e000e010 	.word	0xe000e010

0800061c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60b9      	str	r1, [r7, #8]
 8000624:	607a      	str	r2, [r7, #4]
 8000626:	210f      	movs	r1, #15
 8000628:	187b      	adds	r3, r7, r1
 800062a:	1c02      	adds	r2, r0, #0
 800062c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	187b      	adds	r3, r7, r1
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b25b      	sxtb	r3, r3
 8000636:	0011      	movs	r1, r2
 8000638:	0018      	movs	r0, r3
 800063a:	f7ff ff5d 	bl	80004f8 <NVIC_SetPriority>
}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b004      	add	sp, #16
 8000644:	bd80      	pop	{r7, pc}

08000646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	0018      	movs	r0, r3
 8000652:	f7ff ffbf 	bl	80005d4 <SysTick_Config>
 8000656:	0003      	movs	r3, r0
}
 8000658:	0018      	movs	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	b002      	add	sp, #8
 800065e:	bd80      	pop	{r7, pc}

08000660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000676:	e155      	b.n	8000924 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2101      	movs	r1, #1
 800067e:	697a      	ldr	r2, [r7, #20]
 8000680:	4091      	lsls	r1, r2
 8000682:	000a      	movs	r2, r1
 8000684:	4013      	ands	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d100      	bne.n	8000690 <HAL_GPIO_Init+0x30>
 800068e:	e146      	b.n	800091e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d003      	beq.n	80006a0 <HAL_GPIO_Init+0x40>
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	2b12      	cmp	r3, #18
 800069e:	d123      	bne.n	80006e8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	08da      	lsrs	r2, r3, #3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3208      	adds	r2, #8
 80006a8:	0092      	lsls	r2, r2, #2
 80006aa:	58d3      	ldr	r3, [r2, r3]
 80006ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	2207      	movs	r2, #7
 80006b2:	4013      	ands	r3, r2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	220f      	movs	r2, #15
 80006b8:	409a      	lsls	r2, r3
 80006ba:	0013      	movs	r3, r2
 80006bc:	43da      	mvns	r2, r3
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	4013      	ands	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	691a      	ldr	r2, [r3, #16]
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	2107      	movs	r1, #7
 80006cc:	400b      	ands	r3, r1
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	409a      	lsls	r2, r3
 80006d2:	0013      	movs	r3, r2
 80006d4:	693a      	ldr	r2, [r7, #16]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	08da      	lsrs	r2, r3, #3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3208      	adds	r2, #8
 80006e2:	0092      	lsls	r2, r2, #2
 80006e4:	6939      	ldr	r1, [r7, #16]
 80006e6:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d00b      	beq.n	8000708 <HAL_GPIO_Init+0xa8>
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	d007      	beq.n	8000708 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006fc:	2b11      	cmp	r3, #17
 80006fe:	d003      	beq.n	8000708 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	2b12      	cmp	r3, #18
 8000706:	d130      	bne.n	800076a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	2203      	movs	r2, #3
 8000714:	409a      	lsls	r2, r3
 8000716:	0013      	movs	r3, r2
 8000718:	43da      	mvns	r2, r3
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	4013      	ands	r3, r2
 800071e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	409a      	lsls	r2, r3
 800072a:	0013      	movs	r3, r2
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	4313      	orrs	r3, r2
 8000730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	693a      	ldr	r2, [r7, #16]
 8000736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800073e:	2201      	movs	r2, #1
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	409a      	lsls	r2, r3
 8000744:	0013      	movs	r3, r2
 8000746:	43da      	mvns	r2, r3
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	4013      	ands	r3, r2
 800074c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	091b      	lsrs	r3, r3, #4
 8000754:	2201      	movs	r2, #1
 8000756:	401a      	ands	r2, r3
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	409a      	lsls	r2, r3
 800075c:	0013      	movs	r3, r2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	4313      	orrs	r3, r2
 8000762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	2203      	movs	r2, #3
 8000776:	409a      	lsls	r2, r3
 8000778:	0013      	movs	r3, r2
 800077a:	43da      	mvns	r2, r3
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	4013      	ands	r3, r2
 8000780:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	2203      	movs	r2, #3
 8000788:	401a      	ands	r2, r3
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	409a      	lsls	r2, r3
 8000790:	0013      	movs	r3, r2
 8000792:	693a      	ldr	r2, [r7, #16]
 8000794:	4313      	orrs	r3, r2
 8000796:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	2203      	movs	r2, #3
 80007aa:	409a      	lsls	r2, r3
 80007ac:	0013      	movs	r3, r2
 80007ae:	43da      	mvns	r2, r3
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	4013      	ands	r3, r2
 80007b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	689a      	ldr	r2, [r3, #8]
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	409a      	lsls	r2, r3
 80007c0:	0013      	movs	r3, r2
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	055b      	lsls	r3, r3, #21
 80007d6:	4013      	ands	r3, r2
 80007d8:	d100      	bne.n	80007dc <HAL_GPIO_Init+0x17c>
 80007da:	e0a0      	b.n	800091e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007dc:	4b57      	ldr	r3, [pc, #348]	; (800093c <HAL_GPIO_Init+0x2dc>)
 80007de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e0:	4b56      	ldr	r3, [pc, #344]	; (800093c <HAL_GPIO_Init+0x2dc>)
 80007e2:	2101      	movs	r1, #1
 80007e4:	430a      	orrs	r2, r1
 80007e6:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80007e8:	4a55      	ldr	r2, [pc, #340]	; (8000940 <HAL_GPIO_Init+0x2e0>)
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	089b      	lsrs	r3, r3, #2
 80007ee:	3302      	adds	r3, #2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	589b      	ldr	r3, [r3, r2]
 80007f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	2203      	movs	r2, #3
 80007fa:	4013      	ands	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	220f      	movs	r2, #15
 8000800:	409a      	lsls	r2, r3
 8000802:	0013      	movs	r3, r2
 8000804:	43da      	mvns	r2, r3
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	23a0      	movs	r3, #160	; 0xa0
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	429a      	cmp	r2, r3
 8000814:	d01f      	beq.n	8000856 <HAL_GPIO_Init+0x1f6>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a4a      	ldr	r2, [pc, #296]	; (8000944 <HAL_GPIO_Init+0x2e4>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d019      	beq.n	8000852 <HAL_GPIO_Init+0x1f2>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a49      	ldr	r2, [pc, #292]	; (8000948 <HAL_GPIO_Init+0x2e8>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d013      	beq.n	800084e <HAL_GPIO_Init+0x1ee>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a48      	ldr	r2, [pc, #288]	; (800094c <HAL_GPIO_Init+0x2ec>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d00d      	beq.n	800084a <HAL_GPIO_Init+0x1ea>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a47      	ldr	r2, [pc, #284]	; (8000950 <HAL_GPIO_Init+0x2f0>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d007      	beq.n	8000846 <HAL_GPIO_Init+0x1e6>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a46      	ldr	r2, [pc, #280]	; (8000954 <HAL_GPIO_Init+0x2f4>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d101      	bne.n	8000842 <HAL_GPIO_Init+0x1e2>
 800083e:	2305      	movs	r3, #5
 8000840:	e00a      	b.n	8000858 <HAL_GPIO_Init+0x1f8>
 8000842:	2306      	movs	r3, #6
 8000844:	e008      	b.n	8000858 <HAL_GPIO_Init+0x1f8>
 8000846:	2304      	movs	r3, #4
 8000848:	e006      	b.n	8000858 <HAL_GPIO_Init+0x1f8>
 800084a:	2303      	movs	r3, #3
 800084c:	e004      	b.n	8000858 <HAL_GPIO_Init+0x1f8>
 800084e:	2302      	movs	r3, #2
 8000850:	e002      	b.n	8000858 <HAL_GPIO_Init+0x1f8>
 8000852:	2301      	movs	r3, #1
 8000854:	e000      	b.n	8000858 <HAL_GPIO_Init+0x1f8>
 8000856:	2300      	movs	r3, #0
 8000858:	697a      	ldr	r2, [r7, #20]
 800085a:	2103      	movs	r1, #3
 800085c:	400a      	ands	r2, r1
 800085e:	0092      	lsls	r2, r2, #2
 8000860:	4093      	lsls	r3, r2
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	4313      	orrs	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000868:	4935      	ldr	r1, [pc, #212]	; (8000940 <HAL_GPIO_Init+0x2e0>)
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	089b      	lsrs	r3, r3, #2
 800086e:	3302      	adds	r3, #2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000876:	4b38      	ldr	r3, [pc, #224]	; (8000958 <HAL_GPIO_Init+0x2f8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	43da      	mvns	r2, r3
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	4013      	ands	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	025b      	lsls	r3, r3, #9
 800088e:	4013      	ands	r3, r2
 8000890:	d003      	beq.n	800089a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4313      	orrs	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800089a:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <HAL_GPIO_Init+0x2f8>)
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80008a0:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <HAL_GPIO_Init+0x2f8>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	43da      	mvns	r2, r3
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	4013      	ands	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685a      	ldr	r2, [r3, #4]
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	029b      	lsls	r3, r3, #10
 80008b8:	4013      	ands	r3, r2
 80008ba:	d003      	beq.n	80008c4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80008c4:	4b24      	ldr	r3, [pc, #144]	; (8000958 <HAL_GPIO_Init+0x2f8>)
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008ca:	4b23      	ldr	r3, [pc, #140]	; (8000958 <HAL_GPIO_Init+0x2f8>)
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	43da      	mvns	r2, r3
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	4013      	ands	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685a      	ldr	r2, [r3, #4]
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	035b      	lsls	r3, r3, #13
 80008e2:	4013      	ands	r3, r2
 80008e4:	d003      	beq.n	80008ee <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <HAL_GPIO_Init+0x2f8>)
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_GPIO_Init+0x2f8>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	43da      	mvns	r2, r3
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	4013      	ands	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	039b      	lsls	r3, r3, #14
 800090c:	4013      	ands	r3, r2
 800090e:	d003      	beq.n	8000918 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_GPIO_Init+0x2f8>)
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3301      	adds	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	40da      	lsrs	r2, r3
 800092c:	1e13      	subs	r3, r2, #0
 800092e:	d000      	beq.n	8000932 <HAL_GPIO_Init+0x2d2>
 8000930:	e6a2      	b.n	8000678 <HAL_GPIO_Init+0x18>
  }
}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	b006      	add	sp, #24
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	40021000 	.word	0x40021000
 8000940:	40010000 	.word	0x40010000
 8000944:	50000400 	.word	0x50000400
 8000948:	50000800 	.word	0x50000800
 800094c:	50000c00 	.word	0x50000c00
 8000950:	50001000 	.word	0x50001000
 8000954:	50001c00 	.word	0x50001c00
 8000958:	40010400 	.word	0x40010400

0800095c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	0008      	movs	r0, r1
 8000966:	0011      	movs	r1, r2
 8000968:	1cbb      	adds	r3, r7, #2
 800096a:	1c02      	adds	r2, r0, #0
 800096c:	801a      	strh	r2, [r3, #0]
 800096e:	1c7b      	adds	r3, r7, #1
 8000970:	1c0a      	adds	r2, r1, #0
 8000972:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000974:	1c7b      	adds	r3, r7, #1
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d004      	beq.n	8000986 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800097c:	1cbb      	adds	r3, r7, #2
 800097e:	881a      	ldrh	r2, [r3, #0]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000984:	e003      	b.n	800098e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000986:	1cbb      	adds	r3, r7, #2
 8000988:	881a      	ldrh	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b002      	add	sp, #8
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000998:	b5b0      	push	{r4, r5, r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d102      	bne.n	80009ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	f000 fbbc 	bl	8001124 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009ac:	4bc8      	ldr	r3, [pc, #800]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	220c      	movs	r2, #12
 80009b2:	4013      	ands	r3, r2
 80009b4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009b6:	4bc6      	ldr	r3, [pc, #792]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 80009b8:	68da      	ldr	r2, [r3, #12]
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	025b      	lsls	r3, r3, #9
 80009be:	4013      	ands	r3, r2
 80009c0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2201      	movs	r2, #1
 80009c8:	4013      	ands	r3, r2
 80009ca:	d100      	bne.n	80009ce <HAL_RCC_OscConfig+0x36>
 80009cc:	e07e      	b.n	8000acc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	2b08      	cmp	r3, #8
 80009d2:	d007      	beq.n	80009e4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	2b0c      	cmp	r3, #12
 80009d8:	d112      	bne.n	8000a00 <HAL_RCC_OscConfig+0x68>
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	025b      	lsls	r3, r3, #9
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d10d      	bne.n	8000a00 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009e4:	4bba      	ldr	r3, [pc, #744]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	029b      	lsls	r3, r3, #10
 80009ec:	4013      	ands	r3, r2
 80009ee:	d100      	bne.n	80009f2 <HAL_RCC_OscConfig+0x5a>
 80009f0:	e06b      	b.n	8000aca <HAL_RCC_OscConfig+0x132>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d167      	bne.n	8000aca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	f000 fb92 	bl	8001124 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	025b      	lsls	r3, r3, #9
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d107      	bne.n	8000a1c <HAL_RCC_OscConfig+0x84>
 8000a0c:	4bb0      	ldr	r3, [pc, #704]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4baf      	ldr	r3, [pc, #700]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000a12:	2180      	movs	r1, #128	; 0x80
 8000a14:	0249      	lsls	r1, r1, #9
 8000a16:	430a      	orrs	r2, r1
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	e027      	b.n	8000a6c <HAL_RCC_OscConfig+0xd4>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	23a0      	movs	r3, #160	; 0xa0
 8000a22:	02db      	lsls	r3, r3, #11
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d10e      	bne.n	8000a46 <HAL_RCC_OscConfig+0xae>
 8000a28:	4ba9      	ldr	r3, [pc, #676]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4ba8      	ldr	r3, [pc, #672]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000a2e:	2180      	movs	r1, #128	; 0x80
 8000a30:	02c9      	lsls	r1, r1, #11
 8000a32:	430a      	orrs	r2, r1
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	4ba6      	ldr	r3, [pc, #664]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4ba5      	ldr	r3, [pc, #660]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	0249      	lsls	r1, r1, #9
 8000a40:	430a      	orrs	r2, r1
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	e012      	b.n	8000a6c <HAL_RCC_OscConfig+0xd4>
 8000a46:	4ba2      	ldr	r3, [pc, #648]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	4ba1      	ldr	r3, [pc, #644]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000a4c:	49a1      	ldr	r1, [pc, #644]	; (8000cd4 <HAL_RCC_OscConfig+0x33c>)
 8000a4e:	400a      	ands	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	4b9f      	ldr	r3, [pc, #636]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	025b      	lsls	r3, r3, #9
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4b9b      	ldr	r3, [pc, #620]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b9a      	ldr	r3, [pc, #616]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000a66:	499c      	ldr	r1, [pc, #624]	; (8000cd8 <HAL_RCC_OscConfig+0x340>)
 8000a68:	400a      	ands	r2, r1
 8000a6a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d015      	beq.n	8000aa0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a74:	f7ff fd36 	bl	80004e4 <HAL_GetTick>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a7c:	e009      	b.n	8000a92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a7e:	f7ff fd31 	bl	80004e4 <HAL_GetTick>
 8000a82:	0002      	movs	r2, r0
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	2b64      	cmp	r3, #100	; 0x64
 8000a8a:	d902      	bls.n	8000a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	f000 fb49 	bl	8001124 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a92:	4b8f      	ldr	r3, [pc, #572]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	2380      	movs	r3, #128	; 0x80
 8000a98:	029b      	lsls	r3, r3, #10
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	d0ef      	beq.n	8000a7e <HAL_RCC_OscConfig+0xe6>
 8000a9e:	e015      	b.n	8000acc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aa0:	f7ff fd20 	bl	80004e4 <HAL_GetTick>
 8000aa4:	0003      	movs	r3, r0
 8000aa6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000aa8:	e008      	b.n	8000abc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aaa:	f7ff fd1b 	bl	80004e4 <HAL_GetTick>
 8000aae:	0002      	movs	r2, r0
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	2b64      	cmp	r3, #100	; 0x64
 8000ab6:	d901      	bls.n	8000abc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	e333      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000abc:	4b84      	ldr	r3, [pc, #528]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	029b      	lsls	r3, r3, #10
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	d1f0      	bne.n	8000aaa <HAL_RCC_OscConfig+0x112>
 8000ac8:	e000      	b.n	8000acc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	d100      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x140>
 8000ad6:	e098      	b.n	8000c0a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	d009      	beq.n	8000afa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000ae6:	4b7a      	ldr	r3, [pc, #488]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4b79      	ldr	r3, [pc, #484]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000aec:	2120      	movs	r1, #32
 8000aee:	430a      	orrs	r2, r1
 8000af0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	2220      	movs	r2, #32
 8000af6:	4393      	bics	r3, r2
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	2b04      	cmp	r3, #4
 8000afe:	d005      	beq.n	8000b0c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	2b0c      	cmp	r3, #12
 8000b04:	d13d      	bne.n	8000b82 <HAL_RCC_OscConfig+0x1ea>
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d13a      	bne.n	8000b82 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000b0c:	4b70      	ldr	r3, [pc, #448]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2204      	movs	r2, #4
 8000b12:	4013      	ands	r3, r2
 8000b14:	d004      	beq.n	8000b20 <HAL_RCC_OscConfig+0x188>
 8000b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e301      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b20:	4b6b      	ldr	r3, [pc, #428]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	4a6d      	ldr	r2, [pc, #436]	; (8000cdc <HAL_RCC_OscConfig+0x344>)
 8000b26:	4013      	ands	r3, r2
 8000b28:	0019      	movs	r1, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	021a      	lsls	r2, r3, #8
 8000b30:	4b67      	ldr	r3, [pc, #412]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000b32:	430a      	orrs	r2, r1
 8000b34:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b36:	4b66      	ldr	r3, [pc, #408]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2209      	movs	r2, #9
 8000b3c:	4393      	bics	r3, r2
 8000b3e:	0019      	movs	r1, r3
 8000b40:	4b63      	ldr	r3, [pc, #396]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b44:	430a      	orrs	r2, r1
 8000b46:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b48:	f000 fc20 	bl	800138c <HAL_RCC_GetSysClockFreq>
 8000b4c:	0001      	movs	r1, r0
 8000b4e:	4b60      	ldr	r3, [pc, #384]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	091b      	lsrs	r3, r3, #4
 8000b54:	220f      	movs	r2, #15
 8000b56:	4013      	ands	r3, r2
 8000b58:	4a61      	ldr	r2, [pc, #388]	; (8000ce0 <HAL_RCC_OscConfig+0x348>)
 8000b5a:	5cd3      	ldrb	r3, [r2, r3]
 8000b5c:	000a      	movs	r2, r1
 8000b5e:	40da      	lsrs	r2, r3
 8000b60:	4b60      	ldr	r3, [pc, #384]	; (8000ce4 <HAL_RCC_OscConfig+0x34c>)
 8000b62:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000b64:	2513      	movs	r5, #19
 8000b66:	197c      	adds	r4, r7, r5
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff fc85 	bl	8000478 <HAL_InitTick>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000b72:	197b      	adds	r3, r7, r5
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d047      	beq.n	8000c0a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8000b7a:	2313      	movs	r3, #19
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	e2d0      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d027      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b88:	4b51      	ldr	r3, [pc, #324]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2209      	movs	r2, #9
 8000b8e:	4393      	bics	r3, r2
 8000b90:	0019      	movs	r1, r3
 8000b92:	4b4f      	ldr	r3, [pc, #316]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b96:	430a      	orrs	r2, r1
 8000b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b9a:	f7ff fca3 	bl	80004e4 <HAL_GetTick>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ba2:	e008      	b.n	8000bb6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ba4:	f7ff fc9e 	bl	80004e4 <HAL_GetTick>
 8000ba8:	0002      	movs	r2, r0
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d901      	bls.n	8000bb6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e2b6      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000bb6:	4b46      	ldr	r3, [pc, #280]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2204      	movs	r2, #4
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	d0f1      	beq.n	8000ba4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bc0:	4b43      	ldr	r3, [pc, #268]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	4a45      	ldr	r2, [pc, #276]	; (8000cdc <HAL_RCC_OscConfig+0x344>)
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	0019      	movs	r1, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	021a      	lsls	r2, r3, #8
 8000bd0:	4b3f      	ldr	r3, [pc, #252]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	e018      	b.n	8000c0a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bd8:	4b3d      	ldr	r3, [pc, #244]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b3c      	ldr	r3, [pc, #240]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000bde:	2101      	movs	r1, #1
 8000be0:	438a      	bics	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be4:	f7ff fc7e 	bl	80004e4 <HAL_GetTick>
 8000be8:	0003      	movs	r3, r0
 8000bea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000bec:	e008      	b.n	8000c00 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bee:	f7ff fc79 	bl	80004e4 <HAL_GetTick>
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d901      	bls.n	8000c00 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e291      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000c00:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2204      	movs	r2, #4
 8000c06:	4013      	ands	r3, r2
 8000c08:	d1f1      	bne.n	8000bee <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2210      	movs	r2, #16
 8000c10:	4013      	ands	r3, r2
 8000c12:	d100      	bne.n	8000c16 <HAL_RCC_OscConfig+0x27e>
 8000c14:	e09f      	b.n	8000d56 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d13f      	bne.n	8000c9c <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	4013      	ands	r3, r2
 8000c26:	d005      	beq.n	8000c34 <HAL_RCC_OscConfig+0x29c>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d101      	bne.n	8000c34 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e277      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c34:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	4a2b      	ldr	r2, [pc, #172]	; (8000ce8 <HAL_RCC_OscConfig+0x350>)
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000c44:	430a      	orrs	r2, r1
 8000c46:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c48:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	021b      	lsls	r3, r3, #8
 8000c4e:	0a19      	lsrs	r1, r3, #8
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	061a      	lsls	r2, r3, #24
 8000c56:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c60:	0b5b      	lsrs	r3, r3, #13
 8000c62:	3301      	adds	r3, #1
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	0212      	lsls	r2, r2, #8
 8000c68:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	091b      	lsrs	r3, r3, #4
 8000c70:	210f      	movs	r1, #15
 8000c72:	400b      	ands	r3, r1
 8000c74:	491a      	ldr	r1, [pc, #104]	; (8000ce0 <HAL_RCC_OscConfig+0x348>)
 8000c76:	5ccb      	ldrb	r3, [r1, r3]
 8000c78:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <HAL_RCC_OscConfig+0x34c>)
 8000c7c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000c7e:	2513      	movs	r5, #19
 8000c80:	197c      	adds	r4, r7, r5
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff fbf8 	bl	8000478 <HAL_InitTick>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000c8c:	197b      	adds	r3, r7, r5
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d060      	beq.n	8000d56 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8000c94:	2313      	movs	r3, #19
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	e243      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69db      	ldr	r3, [r3, #28]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d03e      	beq.n	8000d22 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_RCC_OscConfig+0x338>)
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	0049      	lsls	r1, r1, #1
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb2:	f7ff fc17 	bl	80004e4 <HAL_GetTick>
 8000cb6:	0003      	movs	r3, r0
 8000cb8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000cba:	e017      	b.n	8000cec <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cbc:	f7ff fc12 	bl	80004e4 <HAL_GetTick>
 8000cc0:	0002      	movs	r2, r0
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d910      	bls.n	8000cec <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e22a      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	fffeffff 	.word	0xfffeffff
 8000cd8:	fffbffff 	.word	0xfffbffff
 8000cdc:	ffffe0ff 	.word	0xffffe0ff
 8000ce0:	08002610 	.word	0x08002610
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000cec:	4bc6      	ldr	r3, [pc, #792]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	d0e1      	beq.n	8000cbc <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cf8:	4bc3      	ldr	r3, [pc, #780]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	4ac3      	ldr	r2, [pc, #780]	; (800100c <HAL_RCC_OscConfig+0x674>)
 8000cfe:	4013      	ands	r3, r2
 8000d00:	0019      	movs	r1, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d06:	4bc0      	ldr	r3, [pc, #768]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d0c:	4bbe      	ldr	r3, [pc, #760]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	0a19      	lsrs	r1, r3, #8
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a1b      	ldr	r3, [r3, #32]
 8000d18:	061a      	lsls	r2, r3, #24
 8000d1a:	4bbb      	ldr	r3, [pc, #748]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	e019      	b.n	8000d56 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d22:	4bb9      	ldr	r3, [pc, #740]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4bb8      	ldr	r3, [pc, #736]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000d28:	49b9      	ldr	r1, [pc, #740]	; (8001010 <HAL_RCC_OscConfig+0x678>)
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fbd9 	bl	80004e4 <HAL_GetTick>
 8000d32:	0003      	movs	r3, r0
 8000d34:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d38:	f7ff fbd4 	bl	80004e4 <HAL_GetTick>
 8000d3c:	0002      	movs	r2, r0
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e1ec      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000d4a:	4baf      	ldr	r3, [pc, #700]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4013      	ands	r3, r2
 8000d54:	d1f0      	bne.n	8000d38 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2208      	movs	r2, #8
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	d036      	beq.n	8000dce <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d019      	beq.n	8000d9c <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d68:	4ba7      	ldr	r3, [pc, #668]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000d6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d6c:	4ba6      	ldr	r3, [pc, #664]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000d6e:	2101      	movs	r1, #1
 8000d70:	430a      	orrs	r2, r1
 8000d72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d74:	f7ff fbb6 	bl	80004e4 <HAL_GetTick>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000d7c:	e008      	b.n	8000d90 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d7e:	f7ff fbb1 	bl	80004e4 <HAL_GetTick>
 8000d82:	0002      	movs	r2, r0
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d901      	bls.n	8000d90 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e1c9      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000d90:	4b9d      	ldr	r3, [pc, #628]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d94:	2202      	movs	r2, #2
 8000d96:	4013      	ands	r3, r2
 8000d98:	d0f1      	beq.n	8000d7e <HAL_RCC_OscConfig+0x3e6>
 8000d9a:	e018      	b.n	8000dce <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d9c:	4b9a      	ldr	r3, [pc, #616]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000d9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000da0:	4b99      	ldr	r3, [pc, #612]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000da2:	2101      	movs	r1, #1
 8000da4:	438a      	bics	r2, r1
 8000da6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da8:	f7ff fb9c 	bl	80004e4 <HAL_GetTick>
 8000dac:	0003      	movs	r3, r0
 8000dae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000db0:	e008      	b.n	8000dc4 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000db2:	f7ff fb97 	bl	80004e4 <HAL_GetTick>
 8000db6:	0002      	movs	r2, r0
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d901      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e1af      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000dc4:	4b90      	ldr	r3, [pc, #576]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dc8:	2202      	movs	r2, #2
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d1f1      	bne.n	8000db2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d100      	bne.n	8000dda <HAL_RCC_OscConfig+0x442>
 8000dd8:	e0af      	b.n	8000f3a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dda:	2323      	movs	r3, #35	; 0x23
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000de2:	4b89      	ldr	r3, [pc, #548]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	055b      	lsls	r3, r3, #21
 8000dea:	4013      	ands	r3, r2
 8000dec:	d10a      	bne.n	8000e04 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b86      	ldr	r3, [pc, #536]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000df2:	4b85      	ldr	r3, [pc, #532]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	0549      	lsls	r1, r1, #21
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8000dfc:	2323      	movs	r3, #35	; 0x23
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e04:	4b83      	ldr	r3, [pc, #524]	; (8001014 <HAL_RCC_OscConfig+0x67c>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d11a      	bne.n	8000e46 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e10:	4b80      	ldr	r3, [pc, #512]	; (8001014 <HAL_RCC_OscConfig+0x67c>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b7f      	ldr	r3, [pc, #508]	; (8001014 <HAL_RCC_OscConfig+0x67c>)
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	0049      	lsls	r1, r1, #1
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e1e:	f7ff fb61 	bl	80004e4 <HAL_GetTick>
 8000e22:	0003      	movs	r3, r0
 8000e24:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e28:	f7ff fb5c 	bl	80004e4 <HAL_GetTick>
 8000e2c:	0002      	movs	r2, r0
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b64      	cmp	r3, #100	; 0x64
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e174      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3a:	4b76      	ldr	r3, [pc, #472]	; (8001014 <HAL_RCC_OscConfig+0x67c>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	2380      	movs	r3, #128	; 0x80
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4013      	ands	r3, r2
 8000e44:	d0f0      	beq.n	8000e28 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d107      	bne.n	8000e62 <HAL_RCC_OscConfig+0x4ca>
 8000e52:	4b6d      	ldr	r3, [pc, #436]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000e54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e56:	4b6c      	ldr	r3, [pc, #432]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	0049      	lsls	r1, r1, #1
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	651a      	str	r2, [r3, #80]	; 0x50
 8000e60:	e031      	b.n	8000ec6 <HAL_RCC_OscConfig+0x52e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10c      	bne.n	8000e84 <HAL_RCC_OscConfig+0x4ec>
 8000e6a:	4b67      	ldr	r3, [pc, #412]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e6e:	4b66      	ldr	r3, [pc, #408]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000e70:	4967      	ldr	r1, [pc, #412]	; (8001010 <HAL_RCC_OscConfig+0x678>)
 8000e72:	400a      	ands	r2, r1
 8000e74:	651a      	str	r2, [r3, #80]	; 0x50
 8000e76:	4b64      	ldr	r3, [pc, #400]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e7a:	4b63      	ldr	r3, [pc, #396]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000e7c:	4966      	ldr	r1, [pc, #408]	; (8001018 <HAL_RCC_OscConfig+0x680>)
 8000e7e:	400a      	ands	r2, r1
 8000e80:	651a      	str	r2, [r3, #80]	; 0x50
 8000e82:	e020      	b.n	8000ec6 <HAL_RCC_OscConfig+0x52e>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	23a0      	movs	r3, #160	; 0xa0
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d10e      	bne.n	8000eae <HAL_RCC_OscConfig+0x516>
 8000e90:	4b5d      	ldr	r3, [pc, #372]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000e92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e94:	4b5c      	ldr	r3, [pc, #368]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000e96:	2180      	movs	r1, #128	; 0x80
 8000e98:	00c9      	lsls	r1, r1, #3
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	651a      	str	r2, [r3, #80]	; 0x50
 8000e9e:	4b5a      	ldr	r3, [pc, #360]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000ea0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ea2:	4b59      	ldr	r3, [pc, #356]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000ea4:	2180      	movs	r1, #128	; 0x80
 8000ea6:	0049      	lsls	r1, r1, #1
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	651a      	str	r2, [r3, #80]	; 0x50
 8000eac:	e00b      	b.n	8000ec6 <HAL_RCC_OscConfig+0x52e>
 8000eae:	4b56      	ldr	r3, [pc, #344]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eb2:	4b55      	ldr	r3, [pc, #340]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000eb4:	4956      	ldr	r1, [pc, #344]	; (8001010 <HAL_RCC_OscConfig+0x678>)
 8000eb6:	400a      	ands	r2, r1
 8000eb8:	651a      	str	r2, [r3, #80]	; 0x50
 8000eba:	4b53      	ldr	r3, [pc, #332]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ebe:	4b52      	ldr	r3, [pc, #328]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000ec0:	4955      	ldr	r1, [pc, #340]	; (8001018 <HAL_RCC_OscConfig+0x680>)
 8000ec2:	400a      	ands	r2, r1
 8000ec4:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d015      	beq.n	8000efa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ece:	f7ff fb09 	bl	80004e4 <HAL_GetTick>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ed6:	e009      	b.n	8000eec <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed8:	f7ff fb04 	bl	80004e4 <HAL_GetTick>
 8000edc:	0002      	movs	r2, r0
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	4a4e      	ldr	r2, [pc, #312]	; (800101c <HAL_RCC_OscConfig+0x684>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e11b      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000eec:	4b46      	ldr	r3, [pc, #280]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000eee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d0ef      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x540>
 8000ef8:	e014      	b.n	8000f24 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efa:	f7ff faf3 	bl	80004e4 <HAL_GetTick>
 8000efe:	0003      	movs	r3, r0
 8000f00:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000f02:	e009      	b.n	8000f18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f04:	f7ff faee 	bl	80004e4 <HAL_GetTick>
 8000f08:	0002      	movs	r2, r0
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	4a43      	ldr	r2, [pc, #268]	; (800101c <HAL_RCC_OscConfig+0x684>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e105      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000f18:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000f1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4013      	ands	r3, r2
 8000f22:	d1ef      	bne.n	8000f04 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f24:	2323      	movs	r3, #35	; 0x23
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d105      	bne.n	8000f3a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f2e:	4b36      	ldr	r3, [pc, #216]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f32:	4b35      	ldr	r3, [pc, #212]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000f34:	493a      	ldr	r1, [pc, #232]	; (8001020 <HAL_RCC_OscConfig+0x688>)
 8000f36:	400a      	ands	r2, r1
 8000f38:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2220      	movs	r2, #32
 8000f40:	4013      	ands	r3, r2
 8000f42:	d049      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d026      	beq.n	8000f9a <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000f4c:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	430a      	orrs	r2, r1
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000f5e:	2101      	movs	r1, #1
 8000f60:	430a      	orrs	r2, r1
 8000f62:	635a      	str	r2, [r3, #52]	; 0x34
 8000f64:	4b2f      	ldr	r3, [pc, #188]	; (8001024 <HAL_RCC_OscConfig+0x68c>)
 8000f66:	6a1a      	ldr	r2, [r3, #32]
 8000f68:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <HAL_RCC_OscConfig+0x68c>)
 8000f6a:	2180      	movs	r1, #128	; 0x80
 8000f6c:	0189      	lsls	r1, r1, #6
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f72:	f7ff fab7 	bl	80004e4 <HAL_GetTick>
 8000f76:	0003      	movs	r3, r0
 8000f78:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f7c:	f7ff fab2 	bl	80004e4 <HAL_GetTick>
 8000f80:	0002      	movs	r2, r0
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e0ca      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2202      	movs	r2, #2
 8000f94:	4013      	ands	r3, r2
 8000f96:	d0f1      	beq.n	8000f7c <HAL_RCC_OscConfig+0x5e4>
 8000f98:	e01e      	b.n	8000fd8 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	438a      	bics	r2, r1
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <HAL_RCC_OscConfig+0x68c>)
 8000fa8:	6a1a      	ldr	r2, [r3, #32]
 8000faa:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <HAL_RCC_OscConfig+0x68c>)
 8000fac:	491e      	ldr	r1, [pc, #120]	; (8001028 <HAL_RCC_OscConfig+0x690>)
 8000fae:	400a      	ands	r2, r1
 8000fb0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fa97 	bl	80004e4 <HAL_GetTick>
 8000fb6:	0003      	movs	r3, r0
 8000fb8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000fbc:	f7ff fa92 	bl	80004e4 <HAL_GetTick>
 8000fc0:	0002      	movs	r2, r0
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e0aa      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d1f1      	bne.n	8000fbc <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d100      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x64a>
 8000fe0:	e09f      	b.n	8001122 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	2b0c      	cmp	r3, #12
 8000fe6:	d100      	bne.n	8000fea <HAL_RCC_OscConfig+0x652>
 8000fe8:	e078      	b.n	80010dc <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d159      	bne.n	80010a6 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <HAL_RCC_OscConfig+0x670>)
 8000ff8:	490c      	ldr	r1, [pc, #48]	; (800102c <HAL_RCC_OscConfig+0x694>)
 8000ffa:	400a      	ands	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fa71 	bl	80004e4 <HAL_GetTick>
 8001002:	0003      	movs	r3, r0
 8001004:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001006:	e01c      	b.n	8001042 <HAL_RCC_OscConfig+0x6aa>
 8001008:	40021000 	.word	0x40021000
 800100c:	ffff1fff 	.word	0xffff1fff
 8001010:	fffffeff 	.word	0xfffffeff
 8001014:	40007000 	.word	0x40007000
 8001018:	fffffbff 	.word	0xfffffbff
 800101c:	00001388 	.word	0x00001388
 8001020:	efffffff 	.word	0xefffffff
 8001024:	40010000 	.word	0x40010000
 8001028:	ffffdfff 	.word	0xffffdfff
 800102c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001030:	f7ff fa58 	bl	80004e4 <HAL_GetTick>
 8001034:	0002      	movs	r2, r0
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e070      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001042:	4b3a      	ldr	r3, [pc, #232]	; (800112c <HAL_RCC_OscConfig+0x794>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	049b      	lsls	r3, r3, #18
 800104a:	4013      	ands	r3, r2
 800104c:	d1f0      	bne.n	8001030 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800104e:	4b37      	ldr	r3, [pc, #220]	; (800112c <HAL_RCC_OscConfig+0x794>)
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	4a37      	ldr	r2, [pc, #220]	; (8001130 <HAL_RCC_OscConfig+0x798>)
 8001054:	4013      	ands	r3, r2
 8001056:	0019      	movs	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001066:	431a      	orrs	r2, r3
 8001068:	4b30      	ldr	r3, [pc, #192]	; (800112c <HAL_RCC_OscConfig+0x794>)
 800106a:	430a      	orrs	r2, r1
 800106c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800106e:	4b2f      	ldr	r3, [pc, #188]	; (800112c <HAL_RCC_OscConfig+0x794>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <HAL_RCC_OscConfig+0x794>)
 8001074:	2180      	movs	r1, #128	; 0x80
 8001076:	0449      	lsls	r1, r1, #17
 8001078:	430a      	orrs	r2, r1
 800107a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fa32 	bl	80004e4 <HAL_GetTick>
 8001080:	0003      	movs	r3, r0
 8001082:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001086:	f7ff fa2d 	bl	80004e4 <HAL_GetTick>
 800108a:	0002      	movs	r2, r0
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e045      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <HAL_RCC_OscConfig+0x794>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	049b      	lsls	r3, r3, #18
 80010a0:	4013      	ands	r3, r2
 80010a2:	d0f0      	beq.n	8001086 <HAL_RCC_OscConfig+0x6ee>
 80010a4:	e03d      	b.n	8001122 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <HAL_RCC_OscConfig+0x794>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <HAL_RCC_OscConfig+0x794>)
 80010ac:	4921      	ldr	r1, [pc, #132]	; (8001134 <HAL_RCC_OscConfig+0x79c>)
 80010ae:	400a      	ands	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b2:	f7ff fa17 	bl	80004e4 <HAL_GetTick>
 80010b6:	0003      	movs	r3, r0
 80010b8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010bc:	f7ff fa12 	bl	80004e4 <HAL_GetTick>
 80010c0:	0002      	movs	r2, r0
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e02a      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <HAL_RCC_OscConfig+0x794>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	049b      	lsls	r3, r3, #18
 80010d6:	4013      	ands	r3, r2
 80010d8:	d1f0      	bne.n	80010bc <HAL_RCC_OscConfig+0x724>
 80010da:	e022      	b.n	8001122 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d101      	bne.n	80010e8 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e01d      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <HAL_RCC_OscConfig+0x794>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	025b      	lsls	r3, r3, #9
 80010f4:	401a      	ands	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d10f      	bne.n	800111e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	23f0      	movs	r3, #240	; 0xf0
 8001102:	039b      	lsls	r3, r3, #14
 8001104:	401a      	ands	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800110a:	429a      	cmp	r2, r3
 800110c:	d107      	bne.n	800111e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	23c0      	movs	r3, #192	; 0xc0
 8001112:	041b      	lsls	r3, r3, #16
 8001114:	401a      	ands	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800111a:	429a      	cmp	r2, r3
 800111c:	d001      	beq.n	8001122 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	0018      	movs	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	b00a      	add	sp, #40	; 0x28
 800112a:	bdb0      	pop	{r4, r5, r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	ff02ffff 	.word	0xff02ffff
 8001134:	feffffff 	.word	0xfeffffff

08001138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e10d      	b.n	8001368 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800114c:	4b88      	ldr	r3, [pc, #544]	; (8001370 <HAL_RCC_ClockConfig+0x238>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2201      	movs	r2, #1
 8001152:	4013      	ands	r3, r2
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d911      	bls.n	800117e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115a:	4b85      	ldr	r3, [pc, #532]	; (8001370 <HAL_RCC_ClockConfig+0x238>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2201      	movs	r2, #1
 8001160:	4393      	bics	r3, r2
 8001162:	0019      	movs	r1, r3
 8001164:	4b82      	ldr	r3, [pc, #520]	; (8001370 <HAL_RCC_ClockConfig+0x238>)
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800116c:	4b80      	ldr	r3, [pc, #512]	; (8001370 <HAL_RCC_ClockConfig+0x238>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2201      	movs	r2, #1
 8001172:	4013      	ands	r3, r2
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d001      	beq.n	800117e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e0f4      	b.n	8001368 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2202      	movs	r2, #2
 8001184:	4013      	ands	r3, r2
 8001186:	d009      	beq.n	800119c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001188:	4b7a      	ldr	r3, [pc, #488]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	22f0      	movs	r2, #240	; 0xf0
 800118e:	4393      	bics	r3, r2
 8001190:	0019      	movs	r1, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	4b77      	ldr	r3, [pc, #476]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 8001198:	430a      	orrs	r2, r1
 800119a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2201      	movs	r2, #1
 80011a2:	4013      	ands	r3, r2
 80011a4:	d100      	bne.n	80011a8 <HAL_RCC_ClockConfig+0x70>
 80011a6:	e089      	b.n	80012bc <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d107      	bne.n	80011c0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011b0:	4b70      	ldr	r3, [pc, #448]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	029b      	lsls	r3, r3, #10
 80011b8:	4013      	ands	r3, r2
 80011ba:	d120      	bne.n	80011fe <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0d3      	b.n	8001368 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d107      	bne.n	80011d8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80011c8:	4b6a      	ldr	r3, [pc, #424]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	049b      	lsls	r3, r3, #18
 80011d0:	4013      	ands	r3, r2
 80011d2:	d114      	bne.n	80011fe <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e0c7      	b.n	8001368 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d106      	bne.n	80011ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011e0:	4b64      	ldr	r3, [pc, #400]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2204      	movs	r2, #4
 80011e6:	4013      	ands	r3, r2
 80011e8:	d109      	bne.n	80011fe <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e0bc      	b.n	8001368 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011ee:	4b61      	ldr	r3, [pc, #388]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4013      	ands	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e0b4      	b.n	8001368 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011fe:	4b5d      	ldr	r3, [pc, #372]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	2203      	movs	r2, #3
 8001204:	4393      	bics	r3, r2
 8001206:	0019      	movs	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	4b59      	ldr	r3, [pc, #356]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 800120e:	430a      	orrs	r2, r1
 8001210:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001212:	f7ff f967 	bl	80004e4 <HAL_GetTick>
 8001216:	0003      	movs	r3, r0
 8001218:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d111      	bne.n	8001246 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001222:	e009      	b.n	8001238 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001224:	f7ff f95e 	bl	80004e4 <HAL_GetTick>
 8001228:	0002      	movs	r2, r0
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	4a52      	ldr	r2, [pc, #328]	; (8001378 <HAL_RCC_ClockConfig+0x240>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e097      	b.n	8001368 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001238:	4b4e      	ldr	r3, [pc, #312]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	220c      	movs	r2, #12
 800123e:	4013      	ands	r3, r2
 8001240:	2b08      	cmp	r3, #8
 8001242:	d1ef      	bne.n	8001224 <HAL_RCC_ClockConfig+0xec>
 8001244:	e03a      	b.n	80012bc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d111      	bne.n	8001272 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800124e:	e009      	b.n	8001264 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001250:	f7ff f948 	bl	80004e4 <HAL_GetTick>
 8001254:	0002      	movs	r2, r0
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	4a47      	ldr	r2, [pc, #284]	; (8001378 <HAL_RCC_ClockConfig+0x240>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e081      	b.n	8001368 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001264:	4b43      	ldr	r3, [pc, #268]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	220c      	movs	r2, #12
 800126a:	4013      	ands	r3, r2
 800126c:	2b0c      	cmp	r3, #12
 800126e:	d1ef      	bne.n	8001250 <HAL_RCC_ClockConfig+0x118>
 8001270:	e024      	b.n	80012bc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d11b      	bne.n	80012b2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800127a:	e009      	b.n	8001290 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127c:	f7ff f932 	bl	80004e4 <HAL_GetTick>
 8001280:	0002      	movs	r2, r0
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	4a3c      	ldr	r2, [pc, #240]	; (8001378 <HAL_RCC_ClockConfig+0x240>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e06b      	b.n	8001368 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001290:	4b38      	ldr	r3, [pc, #224]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	220c      	movs	r2, #12
 8001296:	4013      	ands	r3, r2
 8001298:	2b04      	cmp	r3, #4
 800129a:	d1ef      	bne.n	800127c <HAL_RCC_ClockConfig+0x144>
 800129c:	e00e      	b.n	80012bc <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800129e:	f7ff f921 	bl	80004e4 <HAL_GetTick>
 80012a2:	0002      	movs	r2, r0
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	4a33      	ldr	r2, [pc, #204]	; (8001378 <HAL_RCC_ClockConfig+0x240>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e05a      	b.n	8001368 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80012b2:	4b30      	ldr	r3, [pc, #192]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	220c      	movs	r2, #12
 80012b8:	4013      	ands	r3, r2
 80012ba:	d1f0      	bne.n	800129e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012bc:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <HAL_RCC_ClockConfig+0x238>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2201      	movs	r2, #1
 80012c2:	4013      	ands	r3, r2
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d211      	bcs.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ca:	4b29      	ldr	r3, [pc, #164]	; (8001370 <HAL_RCC_ClockConfig+0x238>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2201      	movs	r2, #1
 80012d0:	4393      	bics	r3, r2
 80012d2:	0019      	movs	r1, r3
 80012d4:	4b26      	ldr	r3, [pc, #152]	; (8001370 <HAL_RCC_ClockConfig+0x238>)
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <HAL_RCC_ClockConfig+0x238>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4013      	ands	r3, r2
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d001      	beq.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e03c      	b.n	8001368 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2204      	movs	r2, #4
 80012f4:	4013      	ands	r3, r2
 80012f6:	d009      	beq.n	800130c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	4a1f      	ldr	r2, [pc, #124]	; (800137c <HAL_RCC_ClockConfig+0x244>)
 80012fe:	4013      	ands	r3, r2
 8001300:	0019      	movs	r1, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 8001308:	430a      	orrs	r2, r1
 800130a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2208      	movs	r2, #8
 8001312:	4013      	ands	r3, r2
 8001314:	d00a      	beq.n	800132c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	4a19      	ldr	r2, [pc, #100]	; (8001380 <HAL_RCC_ClockConfig+0x248>)
 800131c:	4013      	ands	r3, r2
 800131e:	0019      	movs	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	00da      	lsls	r2, r3, #3
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 8001328:	430a      	orrs	r2, r1
 800132a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800132c:	f000 f82e 	bl	800138c <HAL_RCC_GetSysClockFreq>
 8001330:	0001      	movs	r1, r0
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_RCC_ClockConfig+0x23c>)
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	220f      	movs	r2, #15
 800133a:	4013      	ands	r3, r2
 800133c:	4a11      	ldr	r2, [pc, #68]	; (8001384 <HAL_RCC_ClockConfig+0x24c>)
 800133e:	5cd3      	ldrb	r3, [r2, r3]
 8001340:	000a      	movs	r2, r1
 8001342:	40da      	lsrs	r2, r3
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_RCC_ClockConfig+0x250>)
 8001346:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001348:	250b      	movs	r5, #11
 800134a:	197c      	adds	r4, r7, r5
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff f893 	bl	8000478 <HAL_InitTick>
 8001352:	0003      	movs	r3, r0
 8001354:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001356:	197b      	adds	r3, r7, r5
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800135e:	230b      	movs	r3, #11
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	e000      	b.n	8001368 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	b004      	add	sp, #16
 800136e:	bdb0      	pop	{r4, r5, r7, pc}
 8001370:	40022000 	.word	0x40022000
 8001374:	40021000 	.word	0x40021000
 8001378:	00001388 	.word	0x00001388
 800137c:	fffff8ff 	.word	0xfffff8ff
 8001380:	ffffc7ff 	.word	0xffffc7ff
 8001384:	08002610 	.word	0x08002610
 8001388:	20000000 	.word	0x20000000

0800138c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001392:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	220c      	movs	r2, #12
 800139c:	4013      	ands	r3, r2
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d00e      	beq.n	80013c0 <HAL_RCC_GetSysClockFreq+0x34>
 80013a2:	2b0c      	cmp	r3, #12
 80013a4:	d00f      	beq.n	80013c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d157      	bne.n	800145a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80013aa:	4b35      	ldr	r3, [pc, #212]	; (8001480 <HAL_RCC_GetSysClockFreq+0xf4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2210      	movs	r2, #16
 80013b0:	4013      	ands	r3, r2
 80013b2:	d002      	beq.n	80013ba <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80013b4:	4b33      	ldr	r3, [pc, #204]	; (8001484 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013b6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80013b8:	e05d      	b.n	8001476 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80013ba:	4b33      	ldr	r3, [pc, #204]	; (8001488 <HAL_RCC_GetSysClockFreq+0xfc>)
 80013bc:	613b      	str	r3, [r7, #16]
      break;
 80013be:	e05a      	b.n	8001476 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013c0:	4b32      	ldr	r3, [pc, #200]	; (800148c <HAL_RCC_GetSysClockFreq+0x100>)
 80013c2:	613b      	str	r3, [r7, #16]
      break;
 80013c4:	e057      	b.n	8001476 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	0c9b      	lsrs	r3, r3, #18
 80013ca:	220f      	movs	r2, #15
 80013cc:	4013      	ands	r3, r2
 80013ce:	4a30      	ldr	r2, [pc, #192]	; (8001490 <HAL_RCC_GetSysClockFreq+0x104>)
 80013d0:	5cd3      	ldrb	r3, [r2, r3]
 80013d2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	0d9b      	lsrs	r3, r3, #22
 80013d8:	2203      	movs	r2, #3
 80013da:	4013      	ands	r3, r2
 80013dc:	3301      	adds	r3, #1
 80013de:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_RCC_GetSysClockFreq+0xf4>)
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	025b      	lsls	r3, r3, #9
 80013e8:	4013      	ands	r3, r2
 80013ea:	d00f      	beq.n	800140c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	000a      	movs	r2, r1
 80013f0:	0152      	lsls	r2, r2, #5
 80013f2:	1a52      	subs	r2, r2, r1
 80013f4:	0193      	lsls	r3, r2, #6
 80013f6:	1a9b      	subs	r3, r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	185b      	adds	r3, r3, r1
 80013fc:	025b      	lsls	r3, r3, #9
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	0018      	movs	r0, r3
 8001402:	f7fe fe81 	bl	8000108 <__udivsi3>
 8001406:	0003      	movs	r3, r0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e023      	b.n	8001454 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_RCC_GetSysClockFreq+0xf4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2210      	movs	r2, #16
 8001412:	4013      	ands	r3, r2
 8001414:	d00f      	beq.n	8001436 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	000a      	movs	r2, r1
 800141a:	0152      	lsls	r2, r2, #5
 800141c:	1a52      	subs	r2, r2, r1
 800141e:	0193      	lsls	r3, r2, #6
 8001420:	1a9b      	subs	r3, r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	185b      	adds	r3, r3, r1
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	0018      	movs	r0, r3
 800142c:	f7fe fe6c 	bl	8000108 <__udivsi3>
 8001430:	0003      	movs	r3, r0
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	e00e      	b.n	8001454 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	000a      	movs	r2, r1
 800143a:	0152      	lsls	r2, r2, #5
 800143c:	1a52      	subs	r2, r2, r1
 800143e:	0193      	lsls	r3, r2, #6
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	185b      	adds	r3, r3, r1
 8001446:	029b      	lsls	r3, r3, #10
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	0018      	movs	r0, r3
 800144c:	f7fe fe5c 	bl	8000108 <__udivsi3>
 8001450:	0003      	movs	r3, r0
 8001452:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
      break;
 8001458:	e00d      	b.n	8001476 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_RCC_GetSysClockFreq+0xf4>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	0b5b      	lsrs	r3, r3, #13
 8001460:	2207      	movs	r2, #7
 8001462:	4013      	ands	r3, r2
 8001464:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	2280      	movs	r2, #128	; 0x80
 800146c:	0212      	lsls	r2, r2, #8
 800146e:	409a      	lsls	r2, r3
 8001470:	0013      	movs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
      break;
 8001474:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001476:	693b      	ldr	r3, [r7, #16]
}
 8001478:	0018      	movs	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	b006      	add	sp, #24
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40021000 	.word	0x40021000
 8001484:	003d0900 	.word	0x003d0900
 8001488:	00f42400 	.word	0x00f42400
 800148c:	007a1200 	.word	0x007a1200
 8001490:	08002628 	.word	0x08002628

08001494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001498:	4b02      	ldr	r3, [pc, #8]	; (80014a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	0018      	movs	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	20000000 	.word	0x20000000

080014a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014ac:	f7ff fff2 	bl	8001494 <HAL_RCC_GetHCLKFreq>
 80014b0:	0001      	movs	r1, r0
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	2207      	movs	r2, #7
 80014ba:	4013      	ands	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	40d9      	lsrs	r1, r3
 80014c2:	000b      	movs	r3, r1
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	40021000 	.word	0x40021000
 80014d0:	08002620 	.word	0x08002620

080014d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014d8:	f7ff ffdc 	bl	8001494 <HAL_RCC_GetHCLKFreq>
 80014dc:	0001      	movs	r1, r0
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	0adb      	lsrs	r3, r3, #11
 80014e4:	2207      	movs	r2, #7
 80014e6:	4013      	ands	r3, r2
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	40d9      	lsrs	r1, r3
 80014ee:	000b      	movs	r3, r1
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	40021000 	.word	0x40021000
 80014fc:	08002620 	.word	0x08002620

08001500 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2220      	movs	r2, #32
 800150e:	4013      	ands	r3, r2
 8001510:	d106      	bne.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	4013      	ands	r3, r2
 800151c:	d100      	bne.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800151e:	e0dd      	b.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001520:	2317      	movs	r3, #23
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001528:	4ba4      	ldr	r3, [pc, #656]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800152a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	055b      	lsls	r3, r3, #21
 8001530:	4013      	ands	r3, r2
 8001532:	d10a      	bne.n	800154a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001534:	4ba1      	ldr	r3, [pc, #644]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001538:	4ba0      	ldr	r3, [pc, #640]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800153a:	2180      	movs	r1, #128	; 0x80
 800153c:	0549      	lsls	r1, r1, #21
 800153e:	430a      	orrs	r2, r1
 8001540:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001542:	2317      	movs	r3, #23
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154a:	4b9d      	ldr	r3, [pc, #628]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4013      	ands	r3, r2
 8001554:	d11a      	bne.n	800158c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001556:	4b9a      	ldr	r3, [pc, #616]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4b99      	ldr	r3, [pc, #612]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800155c:	2180      	movs	r1, #128	; 0x80
 800155e:	0049      	lsls	r1, r1, #1
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001564:	f7fe ffbe 	bl	80004e4 <HAL_GetTick>
 8001568:	0003      	movs	r3, r0
 800156a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	e008      	b.n	8001580 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156e:	f7fe ffb9 	bl	80004e4 <HAL_GetTick>
 8001572:	0002      	movs	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b64      	cmp	r3, #100	; 0x64
 800157a:	d901      	bls.n	8001580 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e118      	b.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001580:	4b8f      	ldr	r3, [pc, #572]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4013      	ands	r3, r2
 800158a:	d0f0      	beq.n	800156e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800158c:	4b8b      	ldr	r3, [pc, #556]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	23c0      	movs	r3, #192	; 0xc0
 8001592:	039b      	lsls	r3, r3, #14
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	23c0      	movs	r3, #192	; 0xc0
 800159e:	039b      	lsls	r3, r3, #14
 80015a0:	4013      	ands	r3, r2
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d107      	bne.n	80015b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	23c0      	movs	r3, #192	; 0xc0
 80015ae:	039b      	lsls	r3, r3, #14
 80015b0:	4013      	ands	r3, r2
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d013      	beq.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	23c0      	movs	r3, #192	; 0xc0
 80015be:	029b      	lsls	r3, r3, #10
 80015c0:	401a      	ands	r2, r3
 80015c2:	23c0      	movs	r3, #192	; 0xc0
 80015c4:	029b      	lsls	r3, r3, #10
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d10a      	bne.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80015ca:	4b7c      	ldr	r3, [pc, #496]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	029b      	lsls	r3, r3, #10
 80015d2:	401a      	ands	r2, r3
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	029b      	lsls	r3, r3, #10
 80015d8:	429a      	cmp	r2, r3
 80015da:	d101      	bne.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0e8      	b.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80015e0:	4b76      	ldr	r3, [pc, #472]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80015e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015e4:	23c0      	movs	r3, #192	; 0xc0
 80015e6:	029b      	lsls	r3, r3, #10
 80015e8:	4013      	ands	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d049      	beq.n	8001686 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	23c0      	movs	r3, #192	; 0xc0
 80015f8:	029b      	lsls	r3, r3, #10
 80015fa:	4013      	ands	r3, r2
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d004      	beq.n	800160c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2220      	movs	r2, #32
 8001608:	4013      	ands	r3, r2
 800160a:	d10d      	bne.n	8001628 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	23c0      	movs	r3, #192	; 0xc0
 8001612:	029b      	lsls	r3, r3, #10
 8001614:	4013      	ands	r3, r2
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	429a      	cmp	r2, r3
 800161a:	d034      	beq.n	8001686 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	4013      	ands	r3, r2
 8001626:	d02e      	beq.n	8001686 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001628:	4b64      	ldr	r3, [pc, #400]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800162a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800162c:	4a65      	ldr	r2, [pc, #404]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800162e:	4013      	ands	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001632:	4b62      	ldr	r3, [pc, #392]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001636:	4b61      	ldr	r3, [pc, #388]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	0309      	lsls	r1, r1, #12
 800163c:	430a      	orrs	r2, r1
 800163e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001640:	4b5e      	ldr	r3, [pc, #376]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001642:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001644:	4b5d      	ldr	r3, [pc, #372]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001646:	4960      	ldr	r1, [pc, #384]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001648:	400a      	ands	r2, r1
 800164a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800164c:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4013      	ands	r3, r2
 800165a:	d014      	beq.n	8001686 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7fe ff42 	bl	80004e4 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001664:	e009      	b.n	800167a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7fe ff3d 	bl	80004e4 <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	4a56      	ldr	r2, [pc, #344]	; (80017cc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e09b      	b.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800167a:	4b50      	ldr	r3, [pc, #320]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800167c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4013      	ands	r3, r2
 8001684:	d0ef      	beq.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	23c0      	movs	r3, #192	; 0xc0
 800168c:	029b      	lsls	r3, r3, #10
 800168e:	401a      	ands	r2, r3
 8001690:	23c0      	movs	r3, #192	; 0xc0
 8001692:	029b      	lsls	r3, r3, #10
 8001694:	429a      	cmp	r2, r3
 8001696:	d10c      	bne.n	80016b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001698:	4b48      	ldr	r3, [pc, #288]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a4c      	ldr	r2, [pc, #304]	; (80017d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800169e:	4013      	ands	r3, r2
 80016a0:	0019      	movs	r1, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	23c0      	movs	r3, #192	; 0xc0
 80016a8:	039b      	lsls	r3, r3, #14
 80016aa:	401a      	ands	r2, r3
 80016ac:	4b43      	ldr	r3, [pc, #268]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	4b42      	ldr	r3, [pc, #264]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80016b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	23c0      	movs	r3, #192	; 0xc0
 80016bc:	029b      	lsls	r3, r3, #10
 80016be:	401a      	ands	r2, r3
 80016c0:	4b3e      	ldr	r3, [pc, #248]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80016c2:	430a      	orrs	r2, r1
 80016c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016c6:	2317      	movs	r3, #23
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d105      	bne.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d0:	4b3a      	ldr	r3, [pc, #232]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80016d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016d4:	4b39      	ldr	r3, [pc, #228]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80016d6:	493f      	ldr	r1, [pc, #252]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80016d8:	400a      	ands	r2, r1
 80016da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2201      	movs	r2, #1
 80016e2:	4013      	ands	r3, r2
 80016e4:	d009      	beq.n	80016fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80016e6:	4b35      	ldr	r3, [pc, #212]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	2203      	movs	r2, #3
 80016ec:	4393      	bics	r3, r2
 80016ee:	0019      	movs	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	4b31      	ldr	r3, [pc, #196]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80016f6:	430a      	orrs	r2, r1
 80016f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2202      	movs	r2, #2
 8001700:	4013      	ands	r3, r2
 8001702:	d009      	beq.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001704:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001708:	220c      	movs	r2, #12
 800170a:	4393      	bics	r3, r2
 800170c:	0019      	movs	r1, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001714:	430a      	orrs	r2, r1
 8001716:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2204      	movs	r2, #4
 800171e:	4013      	ands	r3, r2
 8001720:	d009      	beq.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001722:	4b26      	ldr	r3, [pc, #152]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	4a2c      	ldr	r2, [pc, #176]	; (80017d8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001728:	4013      	ands	r3, r2
 800172a:	0019      	movs	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695a      	ldr	r2, [r3, #20]
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001732:	430a      	orrs	r2, r1
 8001734:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2208      	movs	r2, #8
 800173c:	4013      	ands	r3, r2
 800173e:	d009      	beq.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001744:	4a25      	ldr	r2, [pc, #148]	; (80017dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001746:	4013      	ands	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699a      	ldr	r2, [r3, #24]
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001750:	430a      	orrs	r2, r1
 8001752:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4013      	ands	r3, r2
 800175e:	d009      	beq.n	8001774 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001760:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001764:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001766:	4013      	ands	r3, r2
 8001768:	0019      	movs	r1, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69da      	ldr	r2, [r3, #28]
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001770:	430a      	orrs	r2, r1
 8001772:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2240      	movs	r2, #64	; 0x40
 800177a:	4013      	ands	r3, r2
 800177c:	d009      	beq.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001784:	4013      	ands	r3, r2
 8001786:	0019      	movs	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800178e:	430a      	orrs	r2, r1
 8001790:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	4013      	ands	r3, r2
 800179a:	d009      	beq.n	80017b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a0:	4a10      	ldr	r2, [pc, #64]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1a      	ldr	r2, [r3, #32]
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017ac:	430a      	orrs	r2, r1
 80017ae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b006      	add	sp, #24
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40007000 	.word	0x40007000
 80017c4:	fffcffff 	.word	0xfffcffff
 80017c8:	fff7ffff 	.word	0xfff7ffff
 80017cc:	00001388 	.word	0x00001388
 80017d0:	ffcfffff 	.word	0xffcfffff
 80017d4:	efffffff 	.word	0xefffffff
 80017d8:	fffff3ff 	.word	0xfffff3ff
 80017dc:	ffffcfff 	.word	0xffffcfff
 80017e0:	fbffffff 	.word	0xfbffffff
 80017e4:	fff3ffff 	.word	0xfff3ffff

080017e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e044      	b.n	8001884 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d107      	bne.n	8001812 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2270      	movs	r2, #112	; 0x70
 8001806:	2100      	movs	r1, #0
 8001808:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	0018      	movs	r0, r3
 800180e:	f000 fddd 	bl	80023cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2224      	movs	r2, #36	; 0x24
 8001816:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2101      	movs	r1, #1
 8001824:	438a      	bics	r2, r1
 8001826:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	0018      	movs	r0, r3
 800182c:	f000 f830 	bl	8001890 <UART_SetConfig>
 8001830:	0003      	movs	r3, r0
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e024      	b.n	8001884 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	0018      	movs	r0, r3
 8001846:	f000 fb57 	bl	8001ef8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	490d      	ldr	r1, [pc, #52]	; (800188c <HAL_UART_Init+0xa4>)
 8001856:	400a      	ands	r2, r1
 8001858:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	212a      	movs	r1, #42	; 0x2a
 8001866:	438a      	bics	r2, r1
 8001868:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2101      	movs	r1, #1
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	0018      	movs	r0, r3
 800187e:	f000 fbef 	bl	8002060 <UART_CheckIdleState>
 8001882:	0003      	movs	r3, r0
}
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	b002      	add	sp, #8
 800188a:	bd80      	pop	{r7, pc}
 800188c:	ffffb7ff 	.word	0xffffb7ff

08001890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b08e      	sub	sp, #56	; 0x38
 8001894:	af00      	add	r7, sp, #0
 8001896:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001898:	231b      	movs	r3, #27
 800189a:	2218      	movs	r2, #24
 800189c:	4694      	mov	ip, r2
 800189e:	44bc      	add	ip, r7
 80018a0:	4463      	add	r3, ip
 80018a2:	2210      	movs	r2, #16
 80018a4:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80018aa:	2313      	movs	r3, #19
 80018ac:	2218      	movs	r2, #24
 80018ae:	4694      	mov	ip, r2
 80018b0:	44bc      	add	ip, r7
 80018b2:	4463      	add	r3, ip
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4aca      	ldr	r2, [pc, #808]	; (8001c04 <UART_SetConfig+0x374>)
 80018dc:	4013      	ands	r3, r2
 80018de:	0019      	movs	r1, r3
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018e6:	430a      	orrs	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4ac5      	ldr	r2, [pc, #788]	; (8001c08 <UART_SetConfig+0x378>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4abf      	ldr	r2, [pc, #764]	; (8001c0c <UART_SetConfig+0x37c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d004      	beq.n	800191c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001918:	4313      	orrs	r3, r2
 800191a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	4abb      	ldr	r2, [pc, #748]	; (8001c10 <UART_SetConfig+0x380>)
 8001924:	4013      	ands	r3, r2
 8001926:	0019      	movs	r1, r3
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800192e:	430a      	orrs	r2, r1
 8001930:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4ab7      	ldr	r2, [pc, #732]	; (8001c14 <UART_SetConfig+0x384>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d134      	bne.n	80019a6 <UART_SetConfig+0x116>
 800193c:	4bb6      	ldr	r3, [pc, #728]	; (8001c18 <UART_SetConfig+0x388>)
 800193e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001940:	2203      	movs	r2, #3
 8001942:	4013      	ands	r3, r2
 8001944:	2b01      	cmp	r3, #1
 8001946:	d015      	beq.n	8001974 <UART_SetConfig+0xe4>
 8001948:	d304      	bcc.n	8001954 <UART_SetConfig+0xc4>
 800194a:	2b02      	cmp	r3, #2
 800194c:	d00a      	beq.n	8001964 <UART_SetConfig+0xd4>
 800194e:	2b03      	cmp	r3, #3
 8001950:	d018      	beq.n	8001984 <UART_SetConfig+0xf4>
 8001952:	e01f      	b.n	8001994 <UART_SetConfig+0x104>
 8001954:	231b      	movs	r3, #27
 8001956:	2218      	movs	r2, #24
 8001958:	4694      	mov	ip, r2
 800195a:	44bc      	add	ip, r7
 800195c:	4463      	add	r3, ip
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	e0c5      	b.n	8001af0 <UART_SetConfig+0x260>
 8001964:	231b      	movs	r3, #27
 8001966:	2218      	movs	r2, #24
 8001968:	4694      	mov	ip, r2
 800196a:	44bc      	add	ip, r7
 800196c:	4463      	add	r3, ip
 800196e:	2202      	movs	r2, #2
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	e0bd      	b.n	8001af0 <UART_SetConfig+0x260>
 8001974:	231b      	movs	r3, #27
 8001976:	2218      	movs	r2, #24
 8001978:	4694      	mov	ip, r2
 800197a:	44bc      	add	ip, r7
 800197c:	4463      	add	r3, ip
 800197e:	2204      	movs	r2, #4
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	e0b5      	b.n	8001af0 <UART_SetConfig+0x260>
 8001984:	231b      	movs	r3, #27
 8001986:	2218      	movs	r2, #24
 8001988:	4694      	mov	ip, r2
 800198a:	44bc      	add	ip, r7
 800198c:	4463      	add	r3, ip
 800198e:	2208      	movs	r2, #8
 8001990:	701a      	strb	r2, [r3, #0]
 8001992:	e0ad      	b.n	8001af0 <UART_SetConfig+0x260>
 8001994:	231b      	movs	r3, #27
 8001996:	2218      	movs	r2, #24
 8001998:	4694      	mov	ip, r2
 800199a:	44bc      	add	ip, r7
 800199c:	4463      	add	r3, ip
 800199e:	2210      	movs	r2, #16
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	e0a4      	b.n	8001af0 <UART_SetConfig+0x260>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a9c      	ldr	r2, [pc, #624]	; (8001c1c <UART_SetConfig+0x38c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d137      	bne.n	8001a20 <UART_SetConfig+0x190>
 80019b0:	4b99      	ldr	r3, [pc, #612]	; (8001c18 <UART_SetConfig+0x388>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b4:	220c      	movs	r2, #12
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d018      	beq.n	80019ee <UART_SetConfig+0x15e>
 80019bc:	d802      	bhi.n	80019c4 <UART_SetConfig+0x134>
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <UART_SetConfig+0x13e>
 80019c2:	e024      	b.n	8001a0e <UART_SetConfig+0x17e>
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d00a      	beq.n	80019de <UART_SetConfig+0x14e>
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	d018      	beq.n	80019fe <UART_SetConfig+0x16e>
 80019cc:	e01f      	b.n	8001a0e <UART_SetConfig+0x17e>
 80019ce:	231b      	movs	r3, #27
 80019d0:	2218      	movs	r2, #24
 80019d2:	4694      	mov	ip, r2
 80019d4:	44bc      	add	ip, r7
 80019d6:	4463      	add	r3, ip
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	e088      	b.n	8001af0 <UART_SetConfig+0x260>
 80019de:	231b      	movs	r3, #27
 80019e0:	2218      	movs	r2, #24
 80019e2:	4694      	mov	ip, r2
 80019e4:	44bc      	add	ip, r7
 80019e6:	4463      	add	r3, ip
 80019e8:	2202      	movs	r2, #2
 80019ea:	701a      	strb	r2, [r3, #0]
 80019ec:	e080      	b.n	8001af0 <UART_SetConfig+0x260>
 80019ee:	231b      	movs	r3, #27
 80019f0:	2218      	movs	r2, #24
 80019f2:	4694      	mov	ip, r2
 80019f4:	44bc      	add	ip, r7
 80019f6:	4463      	add	r3, ip
 80019f8:	2204      	movs	r2, #4
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	e078      	b.n	8001af0 <UART_SetConfig+0x260>
 80019fe:	231b      	movs	r3, #27
 8001a00:	2218      	movs	r2, #24
 8001a02:	4694      	mov	ip, r2
 8001a04:	44bc      	add	ip, r7
 8001a06:	4463      	add	r3, ip
 8001a08:	2208      	movs	r2, #8
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e070      	b.n	8001af0 <UART_SetConfig+0x260>
 8001a0e:	231b      	movs	r3, #27
 8001a10:	2218      	movs	r2, #24
 8001a12:	4694      	mov	ip, r2
 8001a14:	44bc      	add	ip, r7
 8001a16:	4463      	add	r3, ip
 8001a18:	2210      	movs	r2, #16
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	e067      	b.n	8001af0 <UART_SetConfig+0x260>
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a7e      	ldr	r2, [pc, #504]	; (8001c20 <UART_SetConfig+0x390>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d107      	bne.n	8001a3a <UART_SetConfig+0x1aa>
 8001a2a:	231b      	movs	r3, #27
 8001a2c:	2218      	movs	r2, #24
 8001a2e:	4694      	mov	ip, r2
 8001a30:	44bc      	add	ip, r7
 8001a32:	4463      	add	r3, ip
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e05a      	b.n	8001af0 <UART_SetConfig+0x260>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a79      	ldr	r2, [pc, #484]	; (8001c24 <UART_SetConfig+0x394>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d107      	bne.n	8001a54 <UART_SetConfig+0x1c4>
 8001a44:	231b      	movs	r3, #27
 8001a46:	2218      	movs	r2, #24
 8001a48:	4694      	mov	ip, r2
 8001a4a:	44bc      	add	ip, r7
 8001a4c:	4463      	add	r3, ip
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
 8001a52:	e04d      	b.n	8001af0 <UART_SetConfig+0x260>
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a6c      	ldr	r2, [pc, #432]	; (8001c0c <UART_SetConfig+0x37c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d141      	bne.n	8001ae2 <UART_SetConfig+0x252>
 8001a5e:	4b6e      	ldr	r3, [pc, #440]	; (8001c18 <UART_SetConfig+0x388>)
 8001a60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a62:	23c0      	movs	r3, #192	; 0xc0
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	4013      	ands	r3, r2
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	00d2      	lsls	r2, r2, #3
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d01f      	beq.n	8001ab0 <UART_SetConfig+0x220>
 8001a70:	2280      	movs	r2, #128	; 0x80
 8001a72:	00d2      	lsls	r2, r2, #3
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d802      	bhi.n	8001a7e <UART_SetConfig+0x1ee>
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d009      	beq.n	8001a90 <UART_SetConfig+0x200>
 8001a7c:	e028      	b.n	8001ad0 <UART_SetConfig+0x240>
 8001a7e:	2280      	movs	r2, #128	; 0x80
 8001a80:	0112      	lsls	r2, r2, #4
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00c      	beq.n	8001aa0 <UART_SetConfig+0x210>
 8001a86:	22c0      	movs	r2, #192	; 0xc0
 8001a88:	0112      	lsls	r2, r2, #4
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d018      	beq.n	8001ac0 <UART_SetConfig+0x230>
 8001a8e:	e01f      	b.n	8001ad0 <UART_SetConfig+0x240>
 8001a90:	231b      	movs	r3, #27
 8001a92:	2218      	movs	r2, #24
 8001a94:	4694      	mov	ip, r2
 8001a96:	44bc      	add	ip, r7
 8001a98:	4463      	add	r3, ip
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
 8001a9e:	e027      	b.n	8001af0 <UART_SetConfig+0x260>
 8001aa0:	231b      	movs	r3, #27
 8001aa2:	2218      	movs	r2, #24
 8001aa4:	4694      	mov	ip, r2
 8001aa6:	44bc      	add	ip, r7
 8001aa8:	4463      	add	r3, ip
 8001aaa:	2202      	movs	r2, #2
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	e01f      	b.n	8001af0 <UART_SetConfig+0x260>
 8001ab0:	231b      	movs	r3, #27
 8001ab2:	2218      	movs	r2, #24
 8001ab4:	4694      	mov	ip, r2
 8001ab6:	44bc      	add	ip, r7
 8001ab8:	4463      	add	r3, ip
 8001aba:	2204      	movs	r2, #4
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	e017      	b.n	8001af0 <UART_SetConfig+0x260>
 8001ac0:	231b      	movs	r3, #27
 8001ac2:	2218      	movs	r2, #24
 8001ac4:	4694      	mov	ip, r2
 8001ac6:	44bc      	add	ip, r7
 8001ac8:	4463      	add	r3, ip
 8001aca:	2208      	movs	r2, #8
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	e00f      	b.n	8001af0 <UART_SetConfig+0x260>
 8001ad0:	231b      	movs	r3, #27
 8001ad2:	2218      	movs	r2, #24
 8001ad4:	4694      	mov	ip, r2
 8001ad6:	44bc      	add	ip, r7
 8001ad8:	4463      	add	r3, ip
 8001ada:	2210      	movs	r2, #16
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	e006      	b.n	8001af0 <UART_SetConfig+0x260>
 8001ae2:	231b      	movs	r3, #27
 8001ae4:	2218      	movs	r2, #24
 8001ae6:	4694      	mov	ip, r2
 8001ae8:	44bc      	add	ip, r7
 8001aea:	4463      	add	r3, ip
 8001aec:	2210      	movs	r2, #16
 8001aee:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a45      	ldr	r2, [pc, #276]	; (8001c0c <UART_SetConfig+0x37c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d000      	beq.n	8001afc <UART_SetConfig+0x26c>
 8001afa:	e09d      	b.n	8001c38 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001afc:	231b      	movs	r3, #27
 8001afe:	2218      	movs	r2, #24
 8001b00:	4694      	mov	ip, r2
 8001b02:	44bc      	add	ip, r7
 8001b04:	4463      	add	r3, ip
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d00d      	beq.n	8001b28 <UART_SetConfig+0x298>
 8001b0c:	dc02      	bgt.n	8001b14 <UART_SetConfig+0x284>
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <UART_SetConfig+0x28e>
 8001b12:	e01d      	b.n	8001b50 <UART_SetConfig+0x2c0>
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d012      	beq.n	8001b3e <UART_SetConfig+0x2ae>
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d015      	beq.n	8001b48 <UART_SetConfig+0x2b8>
 8001b1c:	e018      	b.n	8001b50 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001b1e:	f7ff fcc3 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001b22:	0003      	movs	r3, r0
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001b26:	e01b      	b.n	8001b60 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b28:	4b3b      	ldr	r3, [pc, #236]	; (8001c18 <UART_SetConfig+0x388>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d002      	beq.n	8001b38 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8001b32:	4b3d      	ldr	r3, [pc, #244]	; (8001c28 <UART_SetConfig+0x398>)
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8001b36:	e013      	b.n	8001b60 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001b38:	4b3c      	ldr	r3, [pc, #240]	; (8001c2c <UART_SetConfig+0x39c>)
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001b3c:	e010      	b.n	8001b60 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001b3e:	f7ff fc25 	bl	800138c <HAL_RCC_GetSysClockFreq>
 8001b42:	0003      	movs	r3, r0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001b46:	e00b      	b.n	8001b60 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001b4e:	e007      	b.n	8001b60 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001b50:	2313      	movs	r3, #19
 8001b52:	2218      	movs	r2, #24
 8001b54:	4694      	mov	ip, r2
 8001b56:	44bc      	add	ip, r7
 8001b58:	4463      	add	r3, ip
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
        break;
 8001b5e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d100      	bne.n	8001b68 <UART_SetConfig+0x2d8>
 8001b66:	e1a6      	b.n	8001eb6 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	0013      	movs	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	189b      	adds	r3, r3, r2
 8001b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d305      	bcc.n	8001b84 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d907      	bls.n	8001b94 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8001b84:	2313      	movs	r3, #19
 8001b86:	2218      	movs	r2, #24
 8001b88:	4694      	mov	ip, r2
 8001b8a:	44bc      	add	ip, r7
 8001b8c:	4463      	add	r3, ip
 8001b8e:	2201      	movs	r2, #1
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	e190      	b.n	8001eb6 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	6939      	ldr	r1, [r7, #16]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	000b      	movs	r3, r1
 8001ba2:	0e1b      	lsrs	r3, r3, #24
 8001ba4:	0010      	movs	r0, r2
 8001ba6:	0205      	lsls	r5, r0, #8
 8001ba8:	431d      	orrs	r5, r3
 8001baa:	000b      	movs	r3, r1
 8001bac:	021c      	lsls	r4, r3, #8
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	085b      	lsrs	r3, r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68b8      	ldr	r0, [r7, #8]
 8001bbc:	68f9      	ldr	r1, [r7, #12]
 8001bbe:	1900      	adds	r0, r0, r4
 8001bc0:	4169      	adcs	r1, r5
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f7fe fb26 	bl	8000220 <__aeabi_uldivmod>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	000c      	movs	r4, r1
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <UART_SetConfig+0x3a0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d908      	bls.n	8001bf4 <UART_SetConfig+0x364>
 8001be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be4:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <UART_SetConfig+0x3a4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d804      	bhi.n	8001bf4 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	e160      	b.n	8001eb6 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8001bf4:	2313      	movs	r3, #19
 8001bf6:	2218      	movs	r2, #24
 8001bf8:	4694      	mov	ip, r2
 8001bfa:	44bc      	add	ip, r7
 8001bfc:	4463      	add	r3, ip
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	e158      	b.n	8001eb6 <UART_SetConfig+0x626>
 8001c04:	efff69f3 	.word	0xefff69f3
 8001c08:	ffffcfff 	.word	0xffffcfff
 8001c0c:	40004800 	.word	0x40004800
 8001c10:	fffff4ff 	.word	0xfffff4ff
 8001c14:	40013800 	.word	0x40013800
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40004400 	.word	0x40004400
 8001c20:	40004c00 	.word	0x40004c00
 8001c24:	40005000 	.word	0x40005000
 8001c28:	003d0900 	.word	0x003d0900
 8001c2c:	00f42400 	.word	0x00f42400
 8001c30:	000002ff 	.word	0x000002ff
 8001c34:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	69da      	ldr	r2, [r3, #28]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d000      	beq.n	8001c46 <UART_SetConfig+0x3b6>
 8001c44:	e0a9      	b.n	8001d9a <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8001c46:	231b      	movs	r3, #27
 8001c48:	2218      	movs	r2, #24
 8001c4a:	4694      	mov	ip, r2
 8001c4c:	44bc      	add	ip, r7
 8001c4e:	4463      	add	r3, ip
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d86d      	bhi.n	8001d32 <UART_SetConfig+0x4a2>
 8001c56:	009a      	lsls	r2, r3, #2
 8001c58:	4b9f      	ldr	r3, [pc, #636]	; (8001ed8 <UART_SetConfig+0x648>)
 8001c5a:	18d3      	adds	r3, r2, r3
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c60:	f7ff fc22 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001c64:	0003      	movs	r3, r0
 8001c66:	005a      	lsls	r2, r3, #1
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	18d2      	adds	r2, r2, r3
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	0019      	movs	r1, r3
 8001c76:	0010      	movs	r0, r2
 8001c78:	f7fe fa46 	bl	8000108 <__udivsi3>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001c82:	e05e      	b.n	8001d42 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c84:	f7ff fc26 	bl	80014d4 <HAL_RCC_GetPCLK2Freq>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	005a      	lsls	r2, r3, #1
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	085b      	lsrs	r3, r3, #1
 8001c92:	18d2      	adds	r2, r2, r3
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	0019      	movs	r1, r3
 8001c9a:	0010      	movs	r0, r2
 8001c9c:	f7fe fa34 	bl	8000108 <__udivsi3>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001ca6:	e04c      	b.n	8001d42 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ca8:	4b8c      	ldr	r3, [pc, #560]	; (8001edc <UART_SetConfig+0x64c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2210      	movs	r2, #16
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d00e      	beq.n	8001cd0 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	085b      	lsrs	r3, r3, #1
 8001cb8:	4a89      	ldr	r2, [pc, #548]	; (8001ee0 <UART_SetConfig+0x650>)
 8001cba:	189a      	adds	r2, r3, r2
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	0010      	movs	r0, r2
 8001cc4:	f7fe fa20 	bl	8000108 <__udivsi3>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8001cce:	e038      	b.n	8001d42 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	085b      	lsrs	r3, r3, #1
 8001cd6:	4a83      	ldr	r2, [pc, #524]	; (8001ee4 <UART_SetConfig+0x654>)
 8001cd8:	189a      	adds	r2, r3, r2
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	0019      	movs	r1, r3
 8001ce0:	0010      	movs	r0, r2
 8001ce2:	f7fe fa11 	bl	8000108 <__udivsi3>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001cec:	e029      	b.n	8001d42 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cee:	f7ff fb4d 	bl	800138c <HAL_RCC_GetSysClockFreq>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	005a      	lsls	r2, r3, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	18d2      	adds	r2, r2, r3
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	0019      	movs	r1, r3
 8001d04:	0010      	movs	r0, r2
 8001d06:	f7fe f9ff 	bl	8000108 <__udivsi3>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001d10:	e017      	b.n	8001d42 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	085b      	lsrs	r3, r3, #1
 8001d18:	2280      	movs	r2, #128	; 0x80
 8001d1a:	0252      	lsls	r2, r2, #9
 8001d1c:	189a      	adds	r2, r3, r2
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	0019      	movs	r1, r3
 8001d24:	0010      	movs	r0, r2
 8001d26:	f7fe f9ef 	bl	8000108 <__udivsi3>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001d30:	e007      	b.n	8001d42 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001d32:	2313      	movs	r3, #19
 8001d34:	2218      	movs	r2, #24
 8001d36:	4694      	mov	ip, r2
 8001d38:	44bc      	add	ip, r7
 8001d3a:	4463      	add	r3, ip
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]
        break;
 8001d40:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	2b0f      	cmp	r3, #15
 8001d46:	d920      	bls.n	8001d8a <UART_SetConfig+0x4fa>
 8001d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4a:	4a67      	ldr	r2, [pc, #412]	; (8001ee8 <UART_SetConfig+0x658>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d81c      	bhi.n	8001d8a <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	200a      	movs	r0, #10
 8001d56:	2418      	movs	r4, #24
 8001d58:	193b      	adds	r3, r7, r4
 8001d5a:	181b      	adds	r3, r3, r0
 8001d5c:	210f      	movs	r1, #15
 8001d5e:	438a      	bics	r2, r1
 8001d60:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d64:	085b      	lsrs	r3, r3, #1
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	2207      	movs	r2, #7
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	b299      	uxth	r1, r3
 8001d6e:	193b      	adds	r3, r7, r4
 8001d70:	181b      	adds	r3, r3, r0
 8001d72:	193a      	adds	r2, r7, r4
 8001d74:	1812      	adds	r2, r2, r0
 8001d76:	8812      	ldrh	r2, [r2, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	193a      	adds	r2, r7, r4
 8001d82:	1812      	adds	r2, r2, r0
 8001d84:	8812      	ldrh	r2, [r2, #0]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	e095      	b.n	8001eb6 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8001d8a:	2313      	movs	r3, #19
 8001d8c:	2218      	movs	r2, #24
 8001d8e:	4694      	mov	ip, r2
 8001d90:	44bc      	add	ip, r7
 8001d92:	4463      	add	r3, ip
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
 8001d98:	e08d      	b.n	8001eb6 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8001d9a:	231b      	movs	r3, #27
 8001d9c:	2218      	movs	r2, #24
 8001d9e:	4694      	mov	ip, r2
 8001da0:	44bc      	add	ip, r7
 8001da2:	4463      	add	r3, ip
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d86a      	bhi.n	8001e80 <UART_SetConfig+0x5f0>
 8001daa:	009a      	lsls	r2, r3, #2
 8001dac:	4b4f      	ldr	r3, [pc, #316]	; (8001eec <UART_SetConfig+0x65c>)
 8001dae:	18d3      	adds	r3, r2, r3
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001db4:	f7ff fb78 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001db8:	0002      	movs	r2, r0
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	085b      	lsrs	r3, r3, #1
 8001dc0:	18d2      	adds	r2, r2, r3
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	0010      	movs	r0, r2
 8001dca:	f7fe f99d 	bl	8000108 <__udivsi3>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001dd4:	e05c      	b.n	8001e90 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001dd6:	f7ff fb7d 	bl	80014d4 <HAL_RCC_GetPCLK2Freq>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	18d2      	adds	r2, r2, r3
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	0019      	movs	r1, r3
 8001dea:	0010      	movs	r0, r2
 8001dec:	f7fe f98c 	bl	8000108 <__udivsi3>
 8001df0:	0003      	movs	r3, r0
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001df6:	e04b      	b.n	8001e90 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001df8:	4b38      	ldr	r3, [pc, #224]	; (8001edc <UART_SetConfig+0x64c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2210      	movs	r2, #16
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d00e      	beq.n	8001e20 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	085b      	lsrs	r3, r3, #1
 8001e08:	4a39      	ldr	r2, [pc, #228]	; (8001ef0 <UART_SetConfig+0x660>)
 8001e0a:	189a      	adds	r2, r3, r2
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	0019      	movs	r1, r3
 8001e12:	0010      	movs	r0, r2
 8001e14:	f7fe f978 	bl	8000108 <__udivsi3>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8001e1e:	e037      	b.n	8001e90 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	085b      	lsrs	r3, r3, #1
 8001e26:	4a33      	ldr	r2, [pc, #204]	; (8001ef4 <UART_SetConfig+0x664>)
 8001e28:	189a      	adds	r2, r3, r2
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	0019      	movs	r1, r3
 8001e30:	0010      	movs	r0, r2
 8001e32:	f7fe f969 	bl	8000108 <__udivsi3>
 8001e36:	0003      	movs	r3, r0
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001e3c:	e028      	b.n	8001e90 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e3e:	f7ff faa5 	bl	800138c <HAL_RCC_GetSysClockFreq>
 8001e42:	0002      	movs	r2, r0
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	085b      	lsrs	r3, r3, #1
 8001e4a:	18d2      	adds	r2, r2, r3
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	0019      	movs	r1, r3
 8001e52:	0010      	movs	r0, r2
 8001e54:	f7fe f958 	bl	8000108 <__udivsi3>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001e5e:	e017      	b.n	8001e90 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	085b      	lsrs	r3, r3, #1
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	0212      	lsls	r2, r2, #8
 8001e6a:	189a      	adds	r2, r3, r2
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	0019      	movs	r1, r3
 8001e72:	0010      	movs	r0, r2
 8001e74:	f7fe f948 	bl	8000108 <__udivsi3>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001e7e:	e007      	b.n	8001e90 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001e80:	2313      	movs	r3, #19
 8001e82:	2218      	movs	r2, #24
 8001e84:	4694      	mov	ip, r2
 8001e86:	44bc      	add	ip, r7
 8001e88:	4463      	add	r3, ip
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
        break;
 8001e8e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e92:	2b0f      	cmp	r3, #15
 8001e94:	d908      	bls.n	8001ea8 <UART_SetConfig+0x618>
 8001e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e98:	4a13      	ldr	r2, [pc, #76]	; (8001ee8 <UART_SetConfig+0x658>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d804      	bhi.n	8001ea8 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	e006      	b.n	8001eb6 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8001ea8:	2313      	movs	r3, #19
 8001eaa:	2218      	movs	r2, #24
 8001eac:	4694      	mov	ip, r2
 8001eae:	44bc      	add	ip, r7
 8001eb0:	4463      	add	r3, ip
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8001ec2:	2313      	movs	r3, #19
 8001ec4:	2218      	movs	r2, #24
 8001ec6:	4694      	mov	ip, r2
 8001ec8:	44bc      	add	ip, r7
 8001eca:	4463      	add	r3, ip
 8001ecc:	781b      	ldrb	r3, [r3, #0]
}
 8001ece:	0018      	movs	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b00e      	add	sp, #56	; 0x38
 8001ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	080025c8 	.word	0x080025c8
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	007a1200 	.word	0x007a1200
 8001ee4:	01e84800 	.word	0x01e84800
 8001ee8:	0000ffff 	.word	0x0000ffff
 8001eec:	080025ec 	.word	0x080025ec
 8001ef0:	003d0900 	.word	0x003d0900
 8001ef4:	00f42400 	.word	0x00f42400

08001ef8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	2201      	movs	r2, #1
 8001f06:	4013      	ands	r3, r2
 8001f08:	d00b      	beq.n	8001f22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a4a      	ldr	r2, [pc, #296]	; (800203c <UART_AdvFeatureConfig+0x144>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	0019      	movs	r1, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	2202      	movs	r2, #2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d00b      	beq.n	8001f44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4a43      	ldr	r2, [pc, #268]	; (8002040 <UART_AdvFeatureConfig+0x148>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	2204      	movs	r2, #4
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d00b      	beq.n	8001f66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4a3b      	ldr	r2, [pc, #236]	; (8002044 <UART_AdvFeatureConfig+0x14c>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	0019      	movs	r1, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d00b      	beq.n	8001f88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4a34      	ldr	r2, [pc, #208]	; (8002048 <UART_AdvFeatureConfig+0x150>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d00b      	beq.n	8001faa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a2c      	ldr	r2, [pc, #176]	; (800204c <UART_AdvFeatureConfig+0x154>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	2220      	movs	r2, #32
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d00b      	beq.n	8001fcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	4a25      	ldr	r2, [pc, #148]	; (8002050 <UART_AdvFeatureConfig+0x158>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	2240      	movs	r2, #64	; 0x40
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d01d      	beq.n	8002012 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <UART_AdvFeatureConfig+0x15c>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	035b      	lsls	r3, r3, #13
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d10b      	bne.n	8002012 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a15      	ldr	r2, [pc, #84]	; (8002058 <UART_AdvFeatureConfig+0x160>)
 8002002:	4013      	ands	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	4013      	ands	r3, r2
 800201a:	d00b      	beq.n	8002034 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	4a0e      	ldr	r2, [pc, #56]	; (800205c <UART_AdvFeatureConfig+0x164>)
 8002024:	4013      	ands	r3, r2
 8002026:	0019      	movs	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]
  }
}
 8002034:	46c0      	nop			; (mov r8, r8)
 8002036:	46bd      	mov	sp, r7
 8002038:	b002      	add	sp, #8
 800203a:	bd80      	pop	{r7, pc}
 800203c:	fffdffff 	.word	0xfffdffff
 8002040:	fffeffff 	.word	0xfffeffff
 8002044:	fffbffff 	.word	0xfffbffff
 8002048:	ffff7fff 	.word	0xffff7fff
 800204c:	ffffefff 	.word	0xffffefff
 8002050:	ffffdfff 	.word	0xffffdfff
 8002054:	ffefffff 	.word	0xffefffff
 8002058:	ff9fffff 	.word	0xff9fffff
 800205c:	fff7ffff 	.word	0xfff7ffff

08002060 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af02      	add	r7, sp, #8
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800206e:	f7fe fa39 	bl	80004e4 <HAL_GetTick>
 8002072:	0003      	movs	r3, r0
 8002074:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2208      	movs	r2, #8
 800207e:	4013      	ands	r3, r2
 8002080:	2b08      	cmp	r3, #8
 8002082:	d10d      	bne.n	80020a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	0399      	lsls	r1, r3, #14
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <UART_CheckIdleState+0x88>)
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	0013      	movs	r3, r2
 8002092:	2200      	movs	r2, #0
 8002094:	f000 f82a 	bl	80020ec <UART_WaitOnFlagUntilTimeout>
 8002098:	1e03      	subs	r3, r0, #0
 800209a:	d001      	beq.n	80020a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e01f      	b.n	80020e0 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2204      	movs	r2, #4
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d10d      	bne.n	80020ca <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	03d9      	lsls	r1, r3, #15
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <UART_CheckIdleState+0x88>)
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	0013      	movs	r3, r2
 80020bc:	2200      	movs	r2, #0
 80020be:	f000 f815 	bl	80020ec <UART_WaitOnFlagUntilTimeout>
 80020c2:	1e03      	subs	r3, r0, #0
 80020c4:	d001      	beq.n	80020ca <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e00a      	b.n	80020e0 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2220      	movs	r2, #32
 80020ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2270      	movs	r2, #112	; 0x70
 80020da:	2100      	movs	r1, #0
 80020dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	0018      	movs	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b004      	add	sp, #16
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	01ffffff 	.word	0x01ffffff

080020ec <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	1dfb      	adds	r3, r7, #7
 80020fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020fc:	e029      	b.n	8002152 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	3301      	adds	r3, #1
 8002102:	d026      	beq.n	8002152 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002104:	f7fe f9ee 	bl	80004e4 <HAL_GetTick>
 8002108:	0002      	movs	r2, r0
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	429a      	cmp	r2, r3
 8002112:	d302      	bcc.n	800211a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d11b      	bne.n	8002152 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4915      	ldr	r1, [pc, #84]	; (800217c <UART_WaitOnFlagUntilTimeout+0x90>)
 8002126:	400a      	ands	r2, r1
 8002128:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2101      	movs	r1, #1
 8002136:	438a      	bics	r2, r1
 8002138:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2220      	movs	r2, #32
 800213e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2270      	movs	r2, #112	; 0x70
 800214a:	2100      	movs	r1, #0
 800214c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e00f      	b.n	8002172 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	4013      	ands	r3, r2
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	425a      	negs	r2, r3
 8002162:	4153      	adcs	r3, r2
 8002164:	b2db      	uxtb	r3, r3
 8002166:	001a      	movs	r2, r3
 8002168:	1dfb      	adds	r3, r7, #7
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d0c6      	beq.n	80020fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b004      	add	sp, #16
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	fffffe5f 	.word	0xfffffe5f

08002180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002184:	f7fe f958 	bl	8000438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002188:	f000 f806 	bl	8002198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800218c:	f000 f8a0 	bl	80022d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002190:	f000 f86e 	bl	8002270 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002194:	e7fe      	b.n	8002194 <main+0x14>
	...

08002198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b09f      	sub	sp, #124	; 0x7c
 800219c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800219e:	2440      	movs	r4, #64	; 0x40
 80021a0:	193b      	adds	r3, r7, r4
 80021a2:	0018      	movs	r0, r3
 80021a4:	2338      	movs	r3, #56	; 0x38
 80021a6:	001a      	movs	r2, r3
 80021a8:	2100      	movs	r1, #0
 80021aa:	f000 f9f9 	bl	80025a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021ae:	232c      	movs	r3, #44	; 0x2c
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	0018      	movs	r0, r3
 80021b4:	2314      	movs	r3, #20
 80021b6:	001a      	movs	r2, r3
 80021b8:	2100      	movs	r1, #0
 80021ba:	f000 f9f1 	bl	80025a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	0018      	movs	r0, r3
 80021c2:	2328      	movs	r3, #40	; 0x28
 80021c4:	001a      	movs	r2, r3
 80021c6:	2100      	movs	r1, #0
 80021c8:	f000 f9ea 	bl	80025a0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021cc:	4b26      	ldr	r3, [pc, #152]	; (8002268 <SystemClock_Config+0xd0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a26      	ldr	r2, [pc, #152]	; (800226c <SystemClock_Config+0xd4>)
 80021d2:	401a      	ands	r2, r3
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <SystemClock_Config+0xd0>)
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	0109      	lsls	r1, r1, #4
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80021de:	0021      	movs	r1, r4
 80021e0:	187b      	adds	r3, r7, r1
 80021e2:	2210      	movs	r2, #16
 80021e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	2201      	movs	r2, #1
 80021ea:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	2200      	movs	r2, #0
 80021f0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80021f2:	187b      	adds	r3, r7, r1
 80021f4:	22a0      	movs	r2, #160	; 0xa0
 80021f6:	0212      	lsls	r2, r2, #8
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80021fa:	187b      	adds	r3, r7, r1
 80021fc:	2200      	movs	r2, #0
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002200:	187b      	adds	r3, r7, r1
 8002202:	0018      	movs	r0, r3
 8002204:	f7fe fbc8 	bl	8000998 <HAL_RCC_OscConfig>
 8002208:	1e03      	subs	r3, r0, #0
 800220a:	d001      	beq.n	8002210 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800220c:	f000 f8c4 	bl	8002398 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	187b      	adds	r3, r7, r1
 8002214:	220f      	movs	r2, #15
 8002216:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002218:	187b      	adds	r3, r7, r1
 800221a:	2200      	movs	r2, #0
 800221c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800221e:	187b      	adds	r3, r7, r1
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002224:	187b      	adds	r3, r7, r1
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800222a:	187b      	adds	r3, r7, r1
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002230:	187b      	adds	r3, r7, r1
 8002232:	2100      	movs	r1, #0
 8002234:	0018      	movs	r0, r3
 8002236:	f7fe ff7f 	bl	8001138 <HAL_RCC_ClockConfig>
 800223a:	1e03      	subs	r3, r0, #0
 800223c:	d001      	beq.n	8002242 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800223e:	f000 f8ab 	bl	8002398 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	2202      	movs	r2, #2
 8002246:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	0018      	movs	r0, r3
 8002252:	f7ff f955 	bl	8001500 <HAL_RCCEx_PeriphCLKConfig>
 8002256:	1e03      	subs	r3, r0, #0
 8002258:	d001      	beq.n	800225e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800225a:	f000 f89d 	bl	8002398 <Error_Handler>
  }
}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	46bd      	mov	sp, r7
 8002262:	b01f      	add	sp, #124	; 0x7c
 8002264:	bd90      	pop	{r4, r7, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	40007000 	.word	0x40007000
 800226c:	ffffe7ff 	.word	0xffffe7ff

08002270 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002274:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <MX_USART2_UART_Init+0x58>)
 8002276:	4a15      	ldr	r2, [pc, #84]	; (80022cc <MX_USART2_UART_Init+0x5c>)
 8002278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800227a:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <MX_USART2_UART_Init+0x58>)
 800227c:	22e1      	movs	r2, #225	; 0xe1
 800227e:	0252      	lsls	r2, r2, #9
 8002280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_USART2_UART_Init+0x58>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_USART2_UART_Init+0x58>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MX_USART2_UART_Init+0x58>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_USART2_UART_Init+0x58>)
 8002296:	220c      	movs	r2, #12
 8002298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <MX_USART2_UART_Init+0x58>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_USART2_UART_Init+0x58>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <MX_USART2_UART_Init+0x58>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_USART2_UART_Init+0x58>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <MX_USART2_UART_Init+0x58>)
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7ff fa97 	bl	80017e8 <HAL_UART_Init>
 80022ba:	1e03      	subs	r3, r0, #0
 80022bc:	d001      	beq.n	80022c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022be:	f000 f86b 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000024 	.word	0x20000024
 80022cc:	40004400 	.word	0x40004400

080022d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d6:	240c      	movs	r4, #12
 80022d8:	193b      	adds	r3, r7, r4
 80022da:	0018      	movs	r0, r3
 80022dc:	2314      	movs	r3, #20
 80022de:	001a      	movs	r2, r3
 80022e0:	2100      	movs	r1, #0
 80022e2:	f000 f95d 	bl	80025a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e6:	4b29      	ldr	r3, [pc, #164]	; (800238c <MX_GPIO_Init+0xbc>)
 80022e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ea:	4b28      	ldr	r3, [pc, #160]	; (800238c <MX_GPIO_Init+0xbc>)
 80022ec:	2104      	movs	r1, #4
 80022ee:	430a      	orrs	r2, r1
 80022f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <MX_GPIO_Init+0xbc>)
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	2204      	movs	r2, #4
 80022f8:	4013      	ands	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022fe:	4b23      	ldr	r3, [pc, #140]	; (800238c <MX_GPIO_Init+0xbc>)
 8002300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002302:	4b22      	ldr	r3, [pc, #136]	; (800238c <MX_GPIO_Init+0xbc>)
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	430a      	orrs	r2, r1
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c
 800230a:	4b20      	ldr	r3, [pc, #128]	; (800238c <MX_GPIO_Init+0xbc>)
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	2280      	movs	r2, #128	; 0x80
 8002310:	4013      	ands	r3, r2
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <MX_GPIO_Init+0xbc>)
 8002318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <MX_GPIO_Init+0xbc>)
 800231c:	2101      	movs	r1, #1
 800231e:	430a      	orrs	r2, r1
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <MX_GPIO_Init+0xbc>)
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	2201      	movs	r2, #1
 8002328:	4013      	ands	r3, r2
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800232e:	23a0      	movs	r3, #160	; 0xa0
 8002330:	05db      	lsls	r3, r3, #23
 8002332:	2200      	movs	r2, #0
 8002334:	2120      	movs	r1, #32
 8002336:	0018      	movs	r0, r3
 8002338:	f7fe fb10 	bl	800095c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800233c:	193b      	adds	r3, r7, r4
 800233e:	2280      	movs	r2, #128	; 0x80
 8002340:	0192      	lsls	r2, r2, #6
 8002342:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002344:	193b      	adds	r3, r7, r4
 8002346:	4a12      	ldr	r2, [pc, #72]	; (8002390 <MX_GPIO_Init+0xc0>)
 8002348:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	193b      	adds	r3, r7, r4
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002350:	193b      	adds	r3, r7, r4
 8002352:	4a10      	ldr	r2, [pc, #64]	; (8002394 <MX_GPIO_Init+0xc4>)
 8002354:	0019      	movs	r1, r3
 8002356:	0010      	movs	r0, r2
 8002358:	f7fe f982 	bl	8000660 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800235c:	0021      	movs	r1, r4
 800235e:	187b      	adds	r3, r7, r1
 8002360:	2220      	movs	r2, #32
 8002362:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002364:	187b      	adds	r3, r7, r1
 8002366:	2201      	movs	r2, #1
 8002368:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	187b      	adds	r3, r7, r1
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	187b      	adds	r3, r7, r1
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002376:	187a      	adds	r2, r7, r1
 8002378:	23a0      	movs	r3, #160	; 0xa0
 800237a:	05db      	lsls	r3, r3, #23
 800237c:	0011      	movs	r1, r2
 800237e:	0018      	movs	r0, r3
 8002380:	f7fe f96e 	bl	8000660 <HAL_GPIO_Init>

}
 8002384:	46c0      	nop			; (mov r8, r8)
 8002386:	46bd      	mov	sp, r7
 8002388:	b009      	add	sp, #36	; 0x24
 800238a:	bd90      	pop	{r4, r7, pc}
 800238c:	40021000 	.word	0x40021000
 8002390:	10210000 	.word	0x10210000
 8002394:	50000800 	.word	0x50000800

08002398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a8:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <HAL_MspInit+0x24>)
 80023aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_MspInit+0x24>)
 80023ae:	2101      	movs	r1, #1
 80023b0:	430a      	orrs	r2, r1
 80023b2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <HAL_MspInit+0x24>)
 80023b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <HAL_MspInit+0x24>)
 80023ba:	2180      	movs	r1, #128	; 0x80
 80023bc:	0549      	lsls	r1, r1, #21
 80023be:	430a      	orrs	r2, r1
 80023c0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000

080023cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	230c      	movs	r3, #12
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	0018      	movs	r0, r3
 80023da:	2314      	movs	r3, #20
 80023dc:	001a      	movs	r2, r3
 80023de:	2100      	movs	r1, #0
 80023e0:	f000 f8de 	bl	80025a0 <memset>
  if(huart->Instance==USART2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a18      	ldr	r2, [pc, #96]	; (800244c <HAL_UART_MspInit+0x80>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d129      	bne.n	8002442 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ee:	4b18      	ldr	r3, [pc, #96]	; (8002450 <HAL_UART_MspInit+0x84>)
 80023f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023f2:	4b17      	ldr	r3, [pc, #92]	; (8002450 <HAL_UART_MspInit+0x84>)
 80023f4:	2180      	movs	r1, #128	; 0x80
 80023f6:	0289      	lsls	r1, r1, #10
 80023f8:	430a      	orrs	r2, r1
 80023fa:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <HAL_UART_MspInit+0x84>)
 80023fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_UART_MspInit+0x84>)
 8002402:	2101      	movs	r1, #1
 8002404:	430a      	orrs	r2, r1
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <HAL_UART_MspInit+0x84>)
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	2201      	movs	r2, #1
 800240e:	4013      	ands	r3, r2
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002414:	210c      	movs	r1, #12
 8002416:	187b      	adds	r3, r7, r1
 8002418:	220c      	movs	r2, #12
 800241a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	187b      	adds	r3, r7, r1
 800241e:	2202      	movs	r2, #2
 8002420:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	187b      	adds	r3, r7, r1
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002428:	187b      	adds	r3, r7, r1
 800242a:	2203      	movs	r2, #3
 800242c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800242e:	187b      	adds	r3, r7, r1
 8002430:	2204      	movs	r2, #4
 8002432:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002434:	187a      	adds	r2, r7, r1
 8002436:	23a0      	movs	r3, #160	; 0xa0
 8002438:	05db      	lsls	r3, r3, #23
 800243a:	0011      	movs	r1, r2
 800243c:	0018      	movs	r0, r3
 800243e:	f7fe f90f 	bl	8000660 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b008      	add	sp, #32
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	40004400 	.word	0x40004400
 8002450:	40021000 	.word	0x40021000

08002454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002458:	46c0      	nop			; (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <HardFault_Handler+0x4>

08002464 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800247c:	f7fe f826 	bl	80004cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800248c:	4b17      	ldr	r3, [pc, #92]	; (80024ec <SystemInit+0x64>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <SystemInit+0x64>)
 8002492:	2180      	movs	r1, #128	; 0x80
 8002494:	0049      	lsls	r1, r1, #1
 8002496:	430a      	orrs	r2, r1
 8002498:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <SystemInit+0x64>)
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	4b13      	ldr	r3, [pc, #76]	; (80024ec <SystemInit+0x64>)
 80024a0:	4913      	ldr	r1, [pc, #76]	; (80024f0 <SystemInit+0x68>)
 80024a2:	400a      	ands	r2, r1
 80024a4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <SystemInit+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <SystemInit+0x64>)
 80024ac:	4911      	ldr	r1, [pc, #68]	; (80024f4 <SystemInit+0x6c>)
 80024ae:	400a      	ands	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <SystemInit+0x64>)
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <SystemInit+0x64>)
 80024b8:	2101      	movs	r1, #1
 80024ba:	438a      	bics	r2, r1
 80024bc:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <SystemInit+0x64>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <SystemInit+0x64>)
 80024c4:	490c      	ldr	r1, [pc, #48]	; (80024f8 <SystemInit+0x70>)
 80024c6:	400a      	ands	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <SystemInit+0x64>)
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <SystemInit+0x64>)
 80024d0:	490a      	ldr	r1, [pc, #40]	; (80024fc <SystemInit+0x74>)
 80024d2:	400a      	ands	r2, r1
 80024d4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <SystemInit+0x64>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <SystemInit+0x78>)
 80024de:	2280      	movs	r2, #128	; 0x80
 80024e0:	0512      	lsls	r2, r2, #20
 80024e2:	609a      	str	r2, [r3, #8]
#endif
}
 80024e4:	46c0      	nop			; (mov r8, r8)
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	40021000 	.word	0x40021000
 80024f0:	88ff400c 	.word	0x88ff400c
 80024f4:	fef6fff6 	.word	0xfef6fff6
 80024f8:	fffbffff 	.word	0xfffbffff
 80024fc:	ff02ffff 	.word	0xff02ffff
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002504:	480d      	ldr	r0, [pc, #52]	; (800253c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002506:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002508:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800250a:	e003      	b.n	8002514 <LoopCopyDataInit>

0800250c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800250e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002510:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002512:	3104      	adds	r1, #4

08002514 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002514:	480b      	ldr	r0, [pc, #44]	; (8002544 <LoopForever+0xa>)
  ldr  r3, =_edata
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002518:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800251a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800251c:	d3f6      	bcc.n	800250c <CopyDataInit>
  ldr  r2, =_sbss
 800251e:	4a0b      	ldr	r2, [pc, #44]	; (800254c <LoopForever+0x12>)
  b  LoopFillZerobss
 8002520:	e002      	b.n	8002528 <LoopFillZerobss>

08002522 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002522:	2300      	movs	r3, #0
  str  r3, [r2]
 8002524:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002526:	3204      	adds	r2, #4

08002528 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002528:	4b09      	ldr	r3, [pc, #36]	; (8002550 <LoopForever+0x16>)
  cmp  r2, r3
 800252a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800252c:	d3f9      	bcc.n	8002522 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800252e:	f7ff ffab 	bl	8002488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002532:	f000 f811 	bl	8002558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002536:	f7ff fe23 	bl	8002180 <main>

0800253a <LoopForever>:

LoopForever:
    b LoopForever
 800253a:	e7fe      	b.n	800253a <LoopForever>
   ldr   r0, =_estack
 800253c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8002540:	08002644 	.word	0x08002644
  ldr  r0, =_sdata
 8002544:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002548:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 800254c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8002550:	200000a4 	.word	0x200000a4

08002554 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002554:	e7fe      	b.n	8002554 <ADC1_COMP_IRQHandler>
	...

08002558 <__libc_init_array>:
 8002558:	b570      	push	{r4, r5, r6, lr}
 800255a:	2600      	movs	r6, #0
 800255c:	4d0c      	ldr	r5, [pc, #48]	; (8002590 <__libc_init_array+0x38>)
 800255e:	4c0d      	ldr	r4, [pc, #52]	; (8002594 <__libc_init_array+0x3c>)
 8002560:	1b64      	subs	r4, r4, r5
 8002562:	10a4      	asrs	r4, r4, #2
 8002564:	42a6      	cmp	r6, r4
 8002566:	d109      	bne.n	800257c <__libc_init_array+0x24>
 8002568:	2600      	movs	r6, #0
 800256a:	f000 f821 	bl	80025b0 <_init>
 800256e:	4d0a      	ldr	r5, [pc, #40]	; (8002598 <__libc_init_array+0x40>)
 8002570:	4c0a      	ldr	r4, [pc, #40]	; (800259c <__libc_init_array+0x44>)
 8002572:	1b64      	subs	r4, r4, r5
 8002574:	10a4      	asrs	r4, r4, #2
 8002576:	42a6      	cmp	r6, r4
 8002578:	d105      	bne.n	8002586 <__libc_init_array+0x2e>
 800257a:	bd70      	pop	{r4, r5, r6, pc}
 800257c:	00b3      	lsls	r3, r6, #2
 800257e:	58eb      	ldr	r3, [r5, r3]
 8002580:	4798      	blx	r3
 8002582:	3601      	adds	r6, #1
 8002584:	e7ee      	b.n	8002564 <__libc_init_array+0xc>
 8002586:	00b3      	lsls	r3, r6, #2
 8002588:	58eb      	ldr	r3, [r5, r3]
 800258a:	4798      	blx	r3
 800258c:	3601      	adds	r6, #1
 800258e:	e7f2      	b.n	8002576 <__libc_init_array+0x1e>
 8002590:	0800263c 	.word	0x0800263c
 8002594:	0800263c 	.word	0x0800263c
 8002598:	0800263c 	.word	0x0800263c
 800259c:	08002640 	.word	0x08002640

080025a0 <memset>:
 80025a0:	0003      	movs	r3, r0
 80025a2:	1812      	adds	r2, r2, r0
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d100      	bne.n	80025aa <memset+0xa>
 80025a8:	4770      	bx	lr
 80025aa:	7019      	strb	r1, [r3, #0]
 80025ac:	3301      	adds	r3, #1
 80025ae:	e7f9      	b.n	80025a4 <memset+0x4>

080025b0 <_init>:
 80025b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025b6:	bc08      	pop	{r3}
 80025b8:	469e      	mov	lr, r3
 80025ba:	4770      	bx	lr

080025bc <_fini>:
 80025bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c2:	bc08      	pop	{r3}
 80025c4:	469e      	mov	lr, r3
 80025c6:	4770      	bx	lr
